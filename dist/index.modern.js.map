{"version":3,"file":"index.modern.js","sources":["../src/io/Loader.ts","../src/compression/DataType.ts","../src/compression/TokenEncoder.ts","../src/reducer/Reducer.ts","../src/compression/FFlateEncoder.ts","../src/tokenizer/Token.ts","../src/tokenizer/Tokenizer.ts","../src/expander/Extractor.ts","../src/compression/Compressor.ts","../src/index.tsx"],"sourcesContent":["import fetch from \"cross-fetch\";\nconst yaml = require('js-yaml');\n\nfunction extension(file: string) {\n    return file.split(\".\").pop();\n}\n\nexport default class Loader {\n    async load(file: string): Promise<any> {\n        const response = await fetch(file);\n        if (extension(file) === \"yaml\" || extension(file) === \"yml\") {\n            return yaml.load(await response.text());\n        }\n        return extension(file) === \"json\" ? await response.json() : await response.text();\n    }    \n}","import Token, { StoredToken, Type } from \"../tokenizer/Token\";\n\nexport enum StructureType {\n    LEAF = 0,\n    ARRAY = 1,\n    OBJECT = 2,\n    SPLIT = 3,\n};\n\nexport enum DataType {\n    UNDEFINED = 0,\n    NULL = 1,\n    BOOLEAN_FALSE = 2,\n    BOOLEAN_TRUE = 3,\n    INT8 = 4,\n    UINT8 = 5,\n    INT16 = 6,\n    UINT16 = 7,\n    INT32 = 8,\n    UINT32 = 9,\n    FLOAT32 = 10,\n    FLOAT64 = 11,\n    STRING = 12,\n    UNICODE = 13,\n    OBJECT_8 = 17,\n    OBJECT_16 = 18,\n    OBJECT_32 = 19,\n    SPLIT_8 = 20,\n    SPLIT_16 = 21,\n    SPLIT_32 = 22,\n    ARRAY_8 = 23,\n    ARRAY_16 = 24,\n    ARRAY_32 = 25,\n    OFFSET_ARRAY_8 = 26,\n    OFFSET_ARRAY_16 = 27,\n    OFFSET_ARRAY_32 = 28,\n    EMPTY_ARRAY = 29,\n    REFERENCE_8 = 30,\n    REFERENCE_16 = 31,\n    REFERENCE_32 = 32,\n    COMPLEX_OBJECT = 33,\n    UINT2 = 34,\n    UINT4 = 35,\n}\n\nexport const NUMBER_DATA_TYPES = [\n    DataType.UINT8,\n    DataType.INT8,\n    DataType.UINT16,\n    DataType.INT16,\n    DataType.UINT32,\n    DataType.INT32,\n    DataType.FLOAT32,\n    DataType.FLOAT64,\n];\n\nexport class DataTypeUtils {\n    numberSatisfyDataType(value: number, dataType: DataType): boolean {\n        const hasDecimal = value % 1 !== 0;\n        if (hasDecimal) {\n            switch(dataType) {\n                case DataType.FLOAT32:\n                    return Math.fround(value) === value;\n                case DataType.FLOAT64:\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        switch (dataType) {\n            case DataType.UINT8:\n                return value >= 0 && value <= 255;\n            case DataType.INT8:\n                return value >= -128 && value <= 127;\n            case DataType.UINT16:\n                return value >= 0 && value <= 65535;\n            case DataType.INT16:\n                return value >= -32768 && value <= 32767;\n            case DataType.UINT32:\n                return value >= 0;\n            case DataType.INT32:\n                return true;\n        }\n        return false;\n    }\n\n    getBestType(array: number[]): DataType {\n        if (array.some(number => number % 1 !== 0)) {\n            //  decimal\n            if (array.every(number => this.numberSatisfyDataType(number, DataType.FLOAT32))) {\n                return DataType.FLOAT32;\n            }\n            return DataType.FLOAT64;\n        }\n\n        const min = Math.min(...array);\n        const max = Math.max(...array);\n\n        for (let dataType of NUMBER_DATA_TYPES) {\n            if (this.numberSatisfyDataType(min, dataType) && this.numberSatisfyDataType(max, dataType)) {\n                return dataType;\n            }\n        }\n        return DataType.FLOAT64;\n    }\n\n\n    getNumberDataType(value: number): DataType {\n        for (let type of NUMBER_DATA_TYPES) {\n            if (this.numberSatisfyDataType(value, type)) {\n                return type;\n            }\n        }\n        return DataType.UNDEFINED;\n    }\n\n    getStringDataType(value: string): DataType {\n        const letterCodes = value.split(\"\").map(l => l.charCodeAt(0));\n\n        if (letterCodes.every(code => code <= 255)) {\n            return DataType.STRING;\n        } else {\n            return DataType.UNICODE;\n        }    \n    }\n\n    getFullTokenDataType(token: Token): DataType {\n        switch (token.type) {\n            case \"array\":\n                return DataType.ARRAY_8;\n            case \"object\":\n                return DataType.OBJECT_8;\n            case \"split\":\n                return DataType.SPLIT_8;\n            default:\n                return this.getDataType(token);\n        }\n    }\n\n    getDataType(token: StoredToken): DataType {\n        switch (token.type) {\n            case \"complex\":\n                return DataType.COMPLEX_OBJECT;\n            case \"array\":\n            case \"object\":\n            case \"split\":\n                let indices: number[] = token.value;\n                if (!indices.length) {\n                    console.assert(token.type === \"array\");\n                    return DataType.EMPTY_ARRAY;\n                }\n                let offset = 0;\n                if (token.type === \"array\" && indices.length > 3) {\n                    const min = Math.min(...indices);\n                    const max = Math.max(...indices);\n                    if (this.getNumberDataType(max - min) !== this.getNumberDataType(max)) {\n                        offset = min;\n                    }\n                    indices = indices.map(value => value - offset);\n                }\n                const bestType: DataType = this.getBestType(indices);\n                switch (token.type) {\n                    case \"object\":\n                        return bestType === DataType.UINT8\n                            ? DataType.OBJECT_8\n                            : bestType === DataType.UINT16\n                            ? DataType.OBJECT_16\n                            : DataType.OBJECT_32;\n                    case \"split\":\n                        return bestType === DataType.UINT8\n                            ? DataType.SPLIT_8\n                            : bestType === DataType.UINT16\n                            ? DataType.SPLIT_16\n                            : DataType.SPLIT_32;\n                    case \"array\":\n                        if (offset) {\n                            return bestType === DataType.UINT8\n                                ? DataType.OFFSET_ARRAY_8\n                                : bestType === DataType.UINT16\n                                ? DataType.OFFSET_ARRAY_16\n                                : DataType.OFFSET_ARRAY_32;\n                        } else {\n                            return bestType === DataType.UINT8\n                                ? DataType.ARRAY_8\n                                : bestType === DataType.UINT16\n                                ? DataType.ARRAY_16\n                                : DataType.ARRAY_32;\n                        }\n                }\n            case \"leaf\":\n                if (token.value === undefined) {\n                    return DataType.UNDEFINED;\n                } else if (token.value === null) {\n                    return DataType.NULL;\n                } else {\n                    switch (typeof token.value) {\n                        case \"boolean\":\n                            return token.value ? DataType.BOOLEAN_TRUE : DataType.BOOLEAN_FALSE;\n                        case \"string\":\n                            return this.getStringDataType(token.value);\n                        case \"number\":\n                            return this.getNumberDataType(token.value);\n                    }    \n                }\n                break;\n            case \"reference\":\n                switch(this.getNumberDataType(token.value)) {\n                    case DataType.UINT8:\n                        return DataType.REFERENCE_8;\n                    case DataType.UINT16:\n                        return DataType.REFERENCE_16;\n                    case DataType.UINT32:\n                        return DataType.REFERENCE_32;\n                }\n                throw new Error(\"Invalid reference value: \" + token.value);\n        }\n        throw new Error(`Unrecognized type for ${token.type} value: ${token.value}`);\n    }\n\n    dataTypeToType(dataType: DataType): Type {\n        switch(dataType) {\n            case DataType.COMPLEX_OBJECT:\n                return \"complex\";\n            case DataType.EMPTY_ARRAY:\n            case DataType.ARRAY_8:\n            case DataType.ARRAY_16:\n            case DataType.ARRAY_32:\n                return \"array\";\n            case DataType.OBJECT_8:\n            case DataType.OBJECT_16:\n            case DataType.OBJECT_32:\n                return \"object\";\n            case DataType.SPLIT_8:\n            case DataType.SPLIT_16:\n            case DataType.SPLIT_32:\n                return \"split\";\n            case DataType.REFERENCE_8:\n            case DataType.REFERENCE_16:\n            case DataType.REFERENCE_32:\n                return \"reference\";\n            default:\n                return \"leaf\";\n        }\n    }\n\n    typeToStructureType(type: Type): StructureType {\n        switch (type) {\n            case \"leaf\":\n                return StructureType.LEAF;\n            case \"array\":\n                return StructureType.ARRAY;\n            case \"object\":\n                return StructureType.OBJECT;\n            case \"split\":\n                return StructureType.SPLIT;\n        }\n        throw new Error(\"Cannot translate to structure type: \" + type);\n    }\n}","//13093\nimport { StreamDataView } from \"stream-data-view\";\nimport { ReducedToken } from \"../tokenizer/Token\";\nimport { DataType, DataTypeUtils } from \"./DataType\";\n\ntype Tester = (encoder: TokenEncoder, decoder: TokenEncoder, reset: () => void) => void;\n\ninterface MultiInfo {\n    organized: boolean;\n    lastStringLength?: number;\n}\n\nconst MAX_ARRAY_SIZE = 255;\n\nexport default class TokenEncoder {\n    streamDataView: StreamDataView;\n    dataTypeUtils: DataTypeUtils;\n\n    constructor(streamDataView: StreamDataView) {\n        this.streamDataView = streamDataView;\n        this.dataTypeUtils = new DataTypeUtils();\n    }\n\n    encodeTokens(tokens: ReducedToken[], organized: boolean) {\n        let pos = 0;\n        while (pos < tokens.length) {\n            const count = this.encodeMulti(tokens, pos, organized);\n            if (count) {\n                pos += count;\n            }\n        }\n        this.encodeMulti([], pos, organized);\n    }\n\n    decodeTokens(organized: boolean) {\n        const tokens:  ReducedToken[] = [];\n        while(this.streamDataView.getOffset() < this.streamDataView.getLength()) {\n            if (!this.decodeMulti(tokens, organized)) {\n                break;\n            }\n        }\n        return tokens;\n    }\n\n    encodeToken(token: ReducedToken, dataType?: DataType, multiInfo?: MultiInfo): void {\n        const usedDataType: DataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getDataType(token));\n        switch (usedDataType) {\n            case DataType.UNDEFINED:\n            case DataType.NULL:\n            case DataType.BOOLEAN_TRUE:\n            case DataType.BOOLEAN_FALSE:\n            case DataType.EMPTY_ARRAY:\n                break;\n            case DataType.INT8:\n            case DataType.UINT8:\n            case DataType.INT16:\n            case DataType.UINT16:\n            case DataType.INT32:\n            case DataType.UINT32:\n            case DataType.FLOAT32:\n            case DataType.FLOAT64:\n                this.encodeSingleNumber(token.value, usedDataType);\n                break;\n            case DataType.STRING:\n            case DataType.UNICODE:\n                this.encodeString(token.value, usedDataType, multiInfo);\n                break;\n            case DataType.OBJECT_8:\n            case DataType.OBJECT_16:\n            case DataType.OBJECT_32:\n                this.encodeObjectToken(token, usedDataType);\n                break;\n            case DataType.SPLIT_8:\n            case DataType.SPLIT_16:\n            case DataType.SPLIT_32:\n                this.encodeSplitToken(token, usedDataType);\n                break;\n            case DataType.ARRAY_8:\n            case DataType.ARRAY_16:\n            case DataType.ARRAY_32:\n            case DataType.OFFSET_ARRAY_8:\n            case DataType.OFFSET_ARRAY_16:\n            case DataType.OFFSET_ARRAY_32:\n                this.encodeArrayToken(token, usedDataType);\n                break;\n            case DataType.REFERENCE_8:\n            case DataType.REFERENCE_16:\n            case DataType.REFERENCE_32:\n                this.encodeReferenceToken(token, usedDataType);\n                break;\n            case DataType.COMPLEX_OBJECT:\n                this.encodeComplexToken(token, usedDataType);\n                break;\n            default:\n                throw new Error(\"Invalid dataType: \" + usedDataType);\n            }\n    }\n\n    decodeToken(dataType?: DataType, multiInfo?: MultiInfo): ReducedToken {\n        const usedDataType = dataType ?? this.decodeDataType();\n        switch (usedDataType) {\n            case DataType.UNDEFINED:\n                return { type: \"leaf\", value: undefined };\n            case DataType.NULL:\n                return { type: \"leaf\", value: null };\n            case DataType.BOOLEAN_TRUE:\n                return { type: \"leaf\", value: true };\n            case DataType.BOOLEAN_FALSE:\n                return { type: \"leaf\", value: false };\n            case DataType.EMPTY_ARRAY:\n                return { type: \"array\", value: [] };\n            case DataType.UINT2:\n            case DataType.UINT4:\n                    throw new Error(\"Use decode number array.\");\n            case DataType.INT8:\n            case DataType.UINT8:\n            case DataType.INT16:\n            case DataType.UINT16:\n            case DataType.INT32:\n            case DataType.UINT32:\n            case DataType.FLOAT32:\n            case DataType.FLOAT64:\n                return { type: \"leaf\", value: this.decodeSingleNumber(usedDataType) };\n            case DataType.STRING:\n            case DataType.UNICODE:\n                return { type: \"leaf\", value: this.decodeString(usedDataType, multiInfo) };\n            case DataType.OBJECT_8:\n            case DataType.OBJECT_16:\n            case DataType.OBJECT_32:\n                return this.decodeObjectToken(usedDataType);\n            case DataType.SPLIT_8:\n            case DataType.SPLIT_16:\n            case DataType.SPLIT_32:\n                return this.decodeSplitToken(usedDataType);\n            case DataType.ARRAY_8:\n            case DataType.ARRAY_16:\n            case DataType.ARRAY_32:\n            case DataType.OFFSET_ARRAY_8:\n            case DataType.OFFSET_ARRAY_16:\n            case DataType.OFFSET_ARRAY_32:\n                return this.decodeArrayToken(usedDataType);\n            case DataType.REFERENCE_8:\n            case DataType.REFERENCE_16:\n            case DataType.REFERENCE_32:\n                return this.decodeReferenceToken(usedDataType);\n            case DataType.COMPLEX_OBJECT:\n                    return this.decodeComplexToken(usedDataType);\n            default:\n                throw new Error(\"Invalid dataType: \" + usedDataType);\n        }\n    }\n\n    isOffsetDataType(dataType: DataType) {\n        return dataType === DataType.OFFSET_ARRAY_8 || dataType === DataType.OFFSET_ARRAY_16 || dataType === DataType.OFFSET_ARRAY_32;\n    }\n\n    encodeArrayToken(arrayToken: ReducedToken, dataType?: DataType) {\n        const usedDataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getDataType(arrayToken));\n        const numberType = usedDataType === DataType.ARRAY_8 || usedDataType === DataType.OFFSET_ARRAY_8\n            ? DataType.UINT8\n            : usedDataType === DataType.ARRAY_16 || usedDataType === DataType.OFFSET_ARRAY_16\n            ? DataType.UINT16 : DataType.UINT32;\n\n        let indices = arrayToken.value;\n        if (this.isOffsetDataType(usedDataType)) {\n            const offset = Math.min(...indices);\n            indices = indices.map((value: number) => value - offset);\n            this.encodeSingleNumber(offset);\n        }\n\n        this.encodeNumberArray(indices, numberType);\n    }\n\n    decodeArrayToken(dataType?: DataType): ReducedToken {\n        const usedDataType = dataType ?? this.decodeDataType();\n\n        let offset = 0;\n        if (this.isOffsetDataType(usedDataType)) {\n            offset = this.decodeSingleNumber();\n        }\n\n        const numberType = usedDataType === DataType.ARRAY_8 || usedDataType === DataType.OFFSET_ARRAY_8\n            ? DataType.UINT8\n            : usedDataType === DataType.ARRAY_16 || usedDataType === DataType.OFFSET_ARRAY_16\n            ? DataType.UINT16 : DataType.UINT32;\n        const indices = this.decodeNumberArray(numberType)\n            .map(value => value + offset);\n        return {\n            type: \"array\",\n            value: indices,\n        }\n    }\n\n    encodeObjectToken(objectToken: ReducedToken, dataType?: DataType) {\n        const usedDataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getDataType(objectToken));\n        const numberType = usedDataType === DataType.OBJECT_8 ? DataType.UINT8 : usedDataType === DataType.OBJECT_16 ? DataType.UINT16 : DataType.UINT32;\n        const [keysIndex, valuesIndex] = objectToken.value;\n        this.encodeSingleNumber(keysIndex, numberType);\n        this.encodeSingleNumber(valuesIndex, numberType);\n    }\n\n    decodeObjectToken(dataType?: DataType): ReducedToken {\n        const usedDataType = dataType ?? this.decodeDataType();\n        const numberType = usedDataType === DataType.OBJECT_8 ? DataType.UINT8 : usedDataType === DataType.OBJECT_16 ? DataType.UINT16 : DataType.UINT32;\n        return {\n            type: \"object\",\n            value: [this.decodeSingleNumber(numberType), this.decodeSingleNumber(numberType)],\n        };\n    }\n\n    encodeSplitToken(splitToken: ReducedToken, dataType?: DataType) {\n        const usedDataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getDataType(splitToken));\n        const numberType = usedDataType === DataType.SPLIT_8 ? DataType.UINT8 : usedDataType === DataType.SPLIT_16 ? DataType.UINT16 : DataType.UINT32;\n        const [chunksIndex, separatorsIndex] = splitToken.value;\n        this.encodeSingleNumber(chunksIndex, numberType);\n        this.encodeSingleNumber(separatorsIndex, numberType);\n    }\n\n    decodeSplitToken(dataType?: DataType): ReducedToken {\n        const usedDataType = dataType ?? this.decodeDataType();\n        const numberType = usedDataType === DataType.SPLIT_8 ? DataType.UINT8 : usedDataType === DataType.SPLIT_16 ? DataType.UINT16 : DataType.UINT32;\n        return {\n            type: \"split\",\n            value: [this.decodeSingleNumber(numberType), this.decodeSingleNumber(numberType)],\n        };\n    }\n\n    encodeReferenceToken(token: ReducedToken, dataType?: DataType) {\n        const usedDataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getDataType(token));\n        const numberType = usedDataType === DataType.REFERENCE_8 ? DataType.UINT8 : usedDataType === DataType.REFERENCE_16 ? DataType.UINT16 : DataType.UINT32;\n        const index = token.value;\n        this.encodeSingleNumber(index, numberType);\n    }\n\n    decodeReferenceToken(dataType?: DataType): ReducedToken {\n        const usedDataType = dataType ?? this.decodeDataType();\n        const numberType = usedDataType === DataType.REFERENCE_8 ? DataType.UINT8 : usedDataType === DataType.REFERENCE_16 ? DataType.UINT16 : DataType.UINT32;\n        return {\n            type: \"reference\",\n            value: this.decodeSingleNumber(numberType),\n        };\n    }\n\n    encodeComplexToken(token: ReducedToken, dataType?: DataType) {\n        if (dataType === undefined) {\n            this.encodeDataType(this.dataTypeUtils.getDataType(token));\n        }\n        const structure = token.value;\n        this.encodeNumberArray(structure, DataType.UINT2);\n    }\n\n    decodeComplexToken(dataType?: DataType): ReducedToken {\n        const usedDataType = dataType ?? this.decodeDataType();\n        const structure = this.decodeNumberArray(DataType.UINT2);\n        return {\n            type: this.dataTypeUtils.dataTypeToType(usedDataType),\n            value: structure,\n        };\n    }\n\n    encodeDataType(dataType: DataType): DataType {\n        this.streamDataView.setNextUint8(dataType);\n        return dataType;\n    }\n\n    decodeDataType(): DataType {\n        const dataType = this.streamDataView.getNextUint8();\n        return dataType;\n    }\n\n    encodeMulti(tokens: ReducedToken[], pos: number, organized: boolean): number {\n        if (pos >= tokens.length) {\n            this.encodeSingleNumber(0, DataType.UINT8);\n            return 0;\n        }\n        const firstType = this.dataTypeUtils.getDataType(tokens[pos]);\n        let multiCount;\n        const maxCount = Math.min(tokens.length - pos, 255);\n        for (multiCount = 1; multiCount < maxCount; multiCount++) {\n            if (this.dataTypeUtils.getDataType(tokens[pos + multiCount]) !== firstType) {\n                break;\n            }\n        }\n        //  encode a multi, meaning that the same type is going to get repeated multiple times\n        this.encodeSingleNumber(multiCount, DataType.UINT8);\n        this.encodeDataType(firstType);\n        const multiInfo: MultiInfo = { organized };\n        for (let i = 0; i < multiCount; i++) {\n            this.encodeToken(tokens[pos + i], firstType, multiInfo);\n        }\n        return multiCount;\n    }\n\n    decodeMulti(tokens: ReducedToken[], organized: boolean): number {\n        const count = this.streamDataView.getNextUint8();\n        if (!count) {\n            return 0;\n        }\n        const dataType = this.decodeDataType();\n        const multiInfo: MultiInfo = { organized };\n        for (let i = 0; i < count; i++) {\n            const token = this.decodeToken(dataType, multiInfo);\n            tokens.push(token);\n        }\n        return count;\n    }\n\n    encodeSingleNumber(value: number, dataType?: DataType) {\n        const usedDataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getNumberDataType(value));\n\n        switch (usedDataType) {\n            case DataType.UINT2:\n            case DataType.UINT4:\n                    throw new Error(\"Use encode number array.\");\n            case DataType.UINT8:\n                this.streamDataView.setNextUint8(value);\n                break;\n            case DataType.INT8:\n                this.streamDataView.setNextInt8(value);\n                break;\n            case DataType.UINT16:\n                this.streamDataView.setNextUint16(value);\n                break;\n            case DataType.INT16:\n                this.streamDataView.setNextInt16(value);\n                break;\n            case DataType.UINT32:\n                this.streamDataView.setNextUint32(value);\n                break;\n            case DataType.INT32:\n                this.streamDataView.setNextInt32(value);\n                break;\n            case DataType.FLOAT32:\n                this.streamDataView.setNextFloat32(value);\n                break;\n            case DataType.FLOAT64:\n                this.streamDataView.setNextFloat64(value);\n                break;\n            default:\n                throw new Error(\"Invalid dataType for number: \" + usedDataType);\n        }\n    }\n\n    decodeSingleNumber(dataType?: DataType): number {\n        const usedDataType = dataType ?? this.decodeDataType();\n\n        switch (usedDataType) {\n            case DataType.UINT2:\n            case DataType.UINT4:\n                 throw new Error(\"Use decode number array.\");\n            case DataType.UINT8:\n                return this.streamDataView.getNextUint8();\n            case DataType.INT8:\n                return this.streamDataView.getNextInt8();\n            case DataType.UINT16:\n                return this.streamDataView.getNextUint16();\n            case DataType.INT16:\n                return this.streamDataView.getNextInt16();\n            case DataType.UINT32:\n                return this.streamDataView.getNextUint32();\n            case DataType.INT32:\n                return this.streamDataView.getNextInt32();\n            case DataType.FLOAT32:\n                return this.streamDataView.getNextFloat32();\n            case DataType.FLOAT64:\n                return this.streamDataView.getNextFloat64();\n            default:\n                throw new Error(\"Invalid dataType for number: \" + usedDataType);\n        }\n    }\n\n    bit2ToNum([a, b, c, d]: number[]): number {\n        return ((a ?? 0) << 0) | ((b ?? 0) << 2) | ((c ?? 0) << 4) | ((d ?? 0) << 6);\n    }\n\n    numToBit2(n: number, size: number = 4): number[] {\n        return [(n >> 0) & 3, (n >> 2) & 3, (n >> 4) & 3, (n >> 6) & 3].slice(0, size);\n    }\n\n    bit4ToNum([a, b]: number[]): number {\n        return ((a ?? 0) << 0) | ((b ?? 0) << 4);\n    }\n\n    numToBit4(n: number, size: number = 2): number[] {\n        return [(n >> 0) & 15, (n >> 4) & 15].slice(0, size);\n    }\n\n    encodeNumberArray(array: number[], dataType?: DataType) {\n        if (dataType === DataType.UINT2 || dataType === DataType.UINT4) {\n            const stride = dataType === DataType.UINT2 ? 4 : 2;\n            const transform = dataType === DataType.UINT2 ? this.bit2ToNum : this.bit4ToNum;\n            const bytes = [];\n            for (let i = 0; i < array.length; i += stride) {\n                bytes.push(transform(array.slice(i, i + stride)));\n            }\n            this.encodeNumberArray(bytes, DataType.UINT8);\n            this.encodeSingleNumber(array.length - bytes.length * stride, DataType.INT8);\n            return;\n        }\n\n        let pos;\n        for (pos = 0; pos < array.length;) {\n            const size = Math.min(MAX_ARRAY_SIZE, array.length - pos);\n            this.encodeSingleNumber(size, DataType.UINT8);\n            if (!size) {\n                break;\n            }\n\n            const bestType: DataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getBestType(array));\n\n            for (let i = 0; i < size; i++) {\n                this.encodeSingleNumber(array[pos + i], bestType);\n            }    \n\n            pos += size;\n        }\n        if (pos === MAX_ARRAY_SIZE) {\n            //  Reached the max size, but the next one is 0.\n            this.encodeSingleNumber(0, DataType.UINT8);\n        }\n    }\n\n    decodeNumberArray(dataType?: DataType): number[] {\n        if (dataType === DataType.UINT2 || dataType === DataType.UINT4) {\n            const transform = dataType === DataType.UINT2 ? this.numToBit2 : this.numToBit4;\n            const structure = [];\n            const bytes = this.decodeNumberArray(DataType.UINT8);\n            for (let byte of bytes) {\n                structure.push(...transform(byte));\n            }\n            const sizeDiff = this.decodeSingleNumber(DataType.INT8);\n            structure.length += sizeDiff;\n            return structure;                \n        }\n        let size;\n        const numbers = [];\n        do {\n            size = this.decodeSingleNumber(DataType.UINT8);\n            if (!size) {\n                break;\n            }\n\n            const type: DataType = dataType ?? this.decodeDataType();\n            for (let i = 0; i < size; i++) {\n                numbers.push(this.decodeSingleNumber(type));\n            }    \n        } while (size >= MAX_ARRAY_SIZE);\n        return numbers;\n    }\n\n    encodeString(value: string, dataType?: DataType, multiInfo?: MultiInfo): void {\n        const usedDataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getStringDataType(value));\n        const letterCodes = value.split(\"\").map(l => l.charCodeAt(0));\n        if (!multiInfo?.organized || multiInfo.lastStringLength !== value.length) {\n            letterCodes.push(0);\n        }\n        // console.log(letterCodes, value, (letterCodes).map((value) => !value ? 0 : value - min + 1));\n        const numberType = usedDataType === DataType.STRING ? DataType.UINT8 : DataType.UINT16;\n        letterCodes.forEach(code => this.encodeSingleNumber(code, numberType));\n        if (multiInfo) {\n            multiInfo.lastStringLength = value.length;\n        }\n    }\n\n    decodeString(dataType?: DataType, multiInfo?: MultiInfo): string {\n        const usedDataType = dataType ?? this.decodeDataType();\n        const charCodes = [];\n        const numberType = usedDataType === DataType.STRING ? DataType.UINT8 : DataType.UINT16;\n        do {\n            const code = this.decodeSingleNumber(numberType);\n            if (!code) {\n                break;\n            }\n            charCodes.push(code);\n            if (multiInfo?.organized && multiInfo?.lastStringLength && charCodes.length >= multiInfo?.lastStringLength) {\n                break;\n            }\n        } while(true);\n        const string = charCodes.map(code => String.fromCharCode(code)).join(\"\");\n        if (multiInfo) {\n            multiInfo.lastStringLength = string.length;\n        }\n        return string;\n    }\n\n    static selfTest() {\n        const testers: Tester[] = [\n            //  0\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction(DataType.STRING,\n                    dataType => tokenEncoder.encodeDataType(dataType),\n                    reset,\n                    () => tokenDecoder.decodeDataType(),\n                );\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction(DataType.UNDEFINED,\n                    dataType => tokenEncoder.encodeDataType(dataType),\n                    reset,\n                    () => tokenDecoder.decodeDataType(),\n                );\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction(33,\n                    number => tokenEncoder.encodeSingleNumber(number, DataType.INT8),\n                    reset,\n                    () => tokenDecoder.decodeSingleNumber(DataType.INT8));\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction([\n                        { type: \"leaf\", value: 123 },\n                        { type: \"leaf\", value: 45 },\n                        { type: \"leaf\", value: 67 },\n                        { type: \"leaf\", value: 89 },\n                    ],\n                    header => tokenEncoder.encodeMulti(header, 0, false),\n                    reset,\n                    () => {\n                        const result: ReducedToken[] = [];\n                        tokenDecoder.decodeMulti(result, false);\n                        return result;\n                    });\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction([\n                        { type: \"leaf\", value: 1000001 },\n                        { type: \"leaf\", value: 1002000 },\n                        { type: \"leaf\", value: 1003001 },\n                    ],\n                    header => tokenEncoder.encodeMulti(header, 0, false),\n                    reset,\n                    () => {\n                        const result: ReducedToken[] = [];\n                        tokenDecoder.decodeMulti(result, false);\n                        return result;\n                    });                \n            },\n            //  5\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction([1, 2, 3, 4, 10, 20, 200],\n                    array => tokenEncoder.encodeNumberArray(array),\n                    reset,\n                    () => tokenDecoder.decodeNumberArray());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction(new Array(2000).fill(null).map((_,index) => index),\n                    array => tokenEncoder.encodeNumberArray(array),\n                    reset,\n                    () => tokenDecoder.decodeNumberArray());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction([10000, -202, 3, 4, 10, 20, 3200],\n                    array => tokenEncoder.encodeNumberArray(array),\n                    reset,\n                    () => tokenDecoder.decodeNumberArray());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction(\"teststring\",\n                    string => tokenEncoder.encodeString(string),\n                    reset,\n                    () => tokenDecoder.decodeString());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction(\"teststring\",\n                    string => tokenEncoder.encodeString(string, DataType.STRING),\n                    reset,\n                    () => tokenDecoder.decodeString(DataType.STRING));\n            },\n            //  10\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction(\"test😀😃😄😁😆\",\n                    string => tokenEncoder.encodeString(string),\n                    reset,\n                    () => tokenDecoder.decodeString());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"object\", value: [200, 201] },\n                    o => tokenEncoder.encodeObjectToken(o),\n                    reset,\n                    () => tokenDecoder.decodeObjectToken());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"object\", value: [2000, 2001] },\n                    o => tokenEncoder.encodeObjectToken(o),\n                    reset,\n                    () => tokenDecoder.decodeObjectToken());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"object\", value: [2000, 2001] },\n                    o => tokenEncoder.encodeObjectToken(o, DataType.OBJECT_32),\n                    reset,\n                    () => tokenDecoder.decodeObjectToken(DataType.OBJECT_32));\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"split\", value: [200, 201] },\n                    o => tokenEncoder.encodeSplitToken(o),\n                    reset,\n                    () => tokenDecoder.decodeSplitToken());\n            },\n            //  15\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"split\", value: [2000, 2001] },\n                    o => tokenEncoder.encodeSplitToken(o),\n                    reset,\n                    () => tokenDecoder.decodeSplitToken());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"split\", value: [2000, 2001] },\n                    o => tokenEncoder.encodeSplitToken(o, DataType.SPLIT_32),\n                    reset,\n                    () => tokenDecoder.decodeSplitToken(DataType.SPLIT_32));\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"leaf\", value: \"tokenstring\" },\n                    o => tokenEncoder.encodeToken(o),\n                    reset,\n                    () => tokenDecoder.decodeToken());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"leaf\", value: 123.5 },\n                    o => tokenEncoder.encodeToken(o),\n                    reset,\n                    () => tokenDecoder.decodeToken());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"leaf\", value: \"😁😆\" },\n                    o => tokenEncoder.encodeToken(o),\n                    reset,\n                    () => tokenDecoder.decodeToken());\n            },\n            //  20\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"array\", value: [1, 10, 20, 30, 200] },\n                    o => tokenEncoder.encodeToken(o),\n                    reset,\n                    () => tokenDecoder.decodeToken());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"array\", value: [1001, 1010, 1020, 1030, 1200] },\n                    o => tokenEncoder.encodeToken(o),\n                    reset,\n                    () => tokenDecoder.decodeToken());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"array\", value: [10010, 10100, 10300, 20000] },\n                    o => tokenEncoder.encodeToken(o),\n                    reset,\n                    () => tokenDecoder.decodeToken());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"array\", value: [10010, 10100, 10000] },\n                    o => tokenEncoder.encodeToken(o),\n                    reset,\n                    () => tokenDecoder.decodeToken());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"array\", value: new Array(260).fill(null).map((_,index) => index) },\n                    o => tokenEncoder.encodeToken(o),\n                    reset,\n                    () => tokenDecoder.decodeToken());\n            },\n            //  25\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction(new Array(100).fill(null).map((_,index) => {\n                    const token: ReducedToken = {\n                        type: \"array\",\n                        value: new Array(index).fill(null).map((_, index) => index),\n                    };\n                    return token;\n                }),\n                    o => tokenEncoder.encodeTokens(o, false),\n                    reset,\n                    () => tokenDecoder.decodeTokens(false));\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction(new Array(260).fill(null).map((_,index) => {\n                    const token: ReducedToken = {\n                        type: \"array\",\n                        value: new Array(index).fill(null).map((_, index) => index),\n                    };\n                    return token;\n                }),\n                    o => tokenEncoder.encodeTokens(o, false),\n                    reset,\n                    () => tokenDecoder.decodeTokens(false));\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction(new Array(260).fill(null).map((_) => {\n                    const token: ReducedToken = {\n                        type: \"array\",\n                        value: [1],\n                    };\n                    return token;\n                }),\n                    o => tokenEncoder.encodeTokens(o, false),\n                    reset,\n                    () => tokenDecoder.decodeTokens(false));\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"complex\", value: [1, 2, 3, 2, 1, 2, 1, 0] },\n                    o => tokenEncoder.encodeToken(o),\n                    reset,\n                    () => tokenDecoder.decodeToken());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction({ type: \"complex\", valuesplit(\"\").map(a => parseInt(a)) },\n                    o => tokenEncoder.encodeToken(o),\n                    reset,\n                    () => tokenDecoder.decodeToken());\n            },\n            //  30\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction([1, 2, 3, 2, 1, 2, 1, 0],\n                    o => tokenEncoder.encodeNumberArray(o, DataType.UINT2),\n                    reset,\n                    () => tokenDecoder.decodeNumberArray(DataType.UINT2));\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction([1, 15, 12, 12, 1, 9, 1, 0],\n                    o => tokenEncoder.encodeNumberArray(o, DataType.UINT4),\n                    reset,\n                    () => tokenDecoder.decodeNumberArray(DataType.UINT4));\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction(\"xyzxyzyzxxxyyyzzz\",\n                    o => tokenEncoder.encodeString(o),\n                    reset,\n                    () => tokenDecoder.decodeString());\n            },\n            (tokenEncoder, tokenDecoder, reset) => {\n                this.testAction(\"abcdeabcabcadbdddba\",\n                    o => tokenEncoder.encodeString(o),\n                    reset,\n                    () => tokenDecoder.decodeString());\n            },\n        ];\n\n        testers.forEach((tester, index) => {\n            const streamDataView = new StreamDataView();\n            const encoder = new TokenEncoder(streamDataView);\n            const decoder = new TokenEncoder(streamDataView);\n            const reset = () => streamDataView.resetOffset();\n            tester(encoder, decoder, reset);\n            console.info(`✅ Passed test ${index}.`);\n        });\n    }\n\n    private static testAction<T>(\n            value: T,\n            encode: (value: T) => any,\n            reset: () => void,\n            decode: () => T,\n            check: (result: T, value: T) => void = (result, value) => console.assert(JSON.stringify(result) === JSON.stringify(value), `Not equal: \\n%s\\n!==\\n%s (expected)`, JSON.stringify(result), JSON.stringify(value))) {\n        encode(value);\n        reset();\n        const decoded = decode();\n        reset();\n        check(decoded, value);\n    }\n}\n","import Token, { Hash, ReducedToken } from \"../tokenizer/Token\";\nimport { Header } from \"../tokenizer/Header\";\nimport { DataType, DataTypeUtils, StructureType } from \"../compression/DataType\";\n\n/**\n * Stores all information needed to extract data.\n * \n * headerTokens: Common tokens used by all files.\n * files: array of indices that should match to string tokens within headerTokens.\n * getDataTokens: function to retrieve the tokens for each file. Pass the index that corresponds with files.\n */\nexport interface DataStore {\n    version?: string;\n    compressedSize?: number;\n    originalDataSize?: number;\n    headerTokens: ReducedToken[];\n    files: number[];\n    getDataTokens(index: number): ReducedToken[] | undefined;\n}\n\n/**\n * Reduce header from using large tokens to reduce tokens.\n */\nexport default class Reducer {\n    dataTypeUtils: DataTypeUtils;\n\n    constructor() {\n        this.dataTypeUtils = new DataTypeUtils();\n    }\n\n    /**\n     * Reduce header with smaller tokens for storage\n     * \n     * @param header Represents all data that we have.\n     * @returns DataStorage object that's the minimum we can store.\n     */\n    reduce(header: Header): DataStore {\n        const hashToIndex : Record<Hash, number>  = {};\n        //  start with header tokens\n        const headerTokens = this.createReducedHeaderTokens(\n            this.filterSplit(Object.values(header.registry)\n                .filter(token => token.files.size > 1 || token.files.has(\"header\")),\n                header.registry),\n            hashToIndex);\n\n        //  save files\n        const fileEntries = Object.entries(header.files).sort(([name1], [name2]) => name1.localeCompare(name2));\n        const files = fileEntries.map(([,token]) => hashToIndex[token.nameToken.hash]);\n\n        //  save all files separately as complex objects.\n        const dataTokens = fileEntries.map(([, {token: root}]) => {\n            const subHashToIndex = {...hashToIndex};\n            const structure: StructureType[] = [];\n            const result: ReducedToken[] = [{\n                    type: \"complex\",\n                    value: structure,\n            }];\n            this.createComplexObject(root, subHashToIndex, header.registry, headerTokens, structure, result);\n            return result;\n        });\n\n        return {\n            originalDataSize: header.originalDataSize,\n            headerTokens,\n            files,\n            getDataTokens: (index: number) => dataTokens[index],\n        };\n    }\n\n    /**\n     * Sort tokens by frequency.\n     */\n    private sortTokens(tokens: Token[]): void {\n        tokens.sort((t1, t2) => t2.count - t1.count);\n    }\n\n    /**\n     * Organize tokens in groups of 255\n     * @param tokens \n     */\n    private organizeTokens(tokens: Token[]): Token[] {\n        if (!tokens.length) {\n            return tokens;\n        }\n        const buckets: Token[][] = [];\n        tokens.forEach(token => {\n            const dataType = this.dataTypeUtils.getFullTokenDataType(token);\n            let bucket: Token[] | undefined = undefined;\n            for (let b of buckets) {\n                if (b.length < 255 && this.dataTypeUtils.getFullTokenDataType(b[0]) === dataType) {\n                    bucket = b;\n                    break;\n                }\n            }\n            if (!bucket) {\n                bucket = [];\n                buckets.push(bucket);\n            }\n            bucket.push(token);\n        });\n\n        buckets.forEach(bucket => {\n            const dataType = this.dataTypeUtils.getFullTokenDataType(bucket[0]);\n            switch (dataType) {\n                case DataType.UINT8:\n                case DataType.UINT16:\n                case DataType.UINT32:\n                case DataType.INT8:\n                case DataType.INT16:\n                case DataType.INT32:\n                case DataType.FLOAT32:\n                case DataType.FLOAT64:\n                    bucket.sort((a, b) => b.value - a.value);\n                    break;\n                case DataType.STRING:\n                case DataType.UNICODE:\n                    bucket.sort((a, b) => b.value.length - a.value.length);\n                    break;\n                case DataType.ARRAY_8:\n                case DataType.ARRAY_16:\n                case DataType.ARRAY_32:\n                    bucket.sort((a, b) => b.value.length - a.value.length)\n                    break;\n            }\n        });\n        const resultTokens: Token[] = [];\n        buckets.forEach(bucket => bucket.forEach(token => resultTokens.push(token)));\n        return resultTokens;\n    }\n\n    private filterSplit(tokens: Token[], registry: Record<Hash, Token>): Token[] {\n        for (let token of tokens) {\n            if (token.type === \"split\") {\n                const [chunskHash, separatorsHash] = token.reference!;\n                const chunksToken = registry[chunskHash];\n                const separatorsToken = registry[separatorsHash];\n                if (chunksToken.count <= token.count && separatorsToken.count <= token.count) {\n                    chunksToken.deleted = true;\n                    separatorsToken.deleted = true;\n                    token.type = \"leaf\";\n                    delete token.reference;\n                }\n            }\n        }\n        return tokens.filter(({deleted}) => !deleted);\n    }\n\n    private createReducedHeaderTokens(tokens: Token[], hashToIndex : Record<Hash, number>, offset: number = 0) {\n        this.sortTokens(tokens);\n        const organizedTokens = this.organizeTokens(tokens);\n\n        organizedTokens.forEach(({hash}, index) => hashToIndex[hash] = index + offset);\n\n        return organizedTokens.map(token => ({\n            type: token.type,\n            value: token.reference?.map(hash => hashToIndex[hash]) ?? token.value,\n        }));\n    }\n\n    /**\n     *  Traverse object to produce a set of tokens used to produce a complex object\n     * @param token Root token\n     * @param hashToIndex Hash to index mapping\n     * @param result Resulting set of tokens\n     */\n    createComplexObject(token: Token, hashToIndex: Record<Hash, number>, registry: Record<Hash, Token>, headerTokens: ReducedToken[], structure: StructureType[], resultDataTokens: ReducedToken[]): void {\n        if (hashToIndex[token.hash] >= 0) {\n            structure.push(StructureType.LEAF);\n            resultDataTokens.push({ type: \"reference\", value: hashToIndex[token.hash] });\n        } else if (token.type === \"leaf\") {\n            structure.push(this.dataTypeUtils.typeToStructureType(token.type));\n            hashToIndex[token.hash] = headerTokens.length + resultDataTokens.length;\n            resultDataTokens.push({ type: token.type, value: token.value });\n        } else if (token.type === \"split\" || token.type === \"object\" || token.type === \"array\") {\n            structure.push(this.dataTypeUtils.typeToStructureType(token.type));\n            if (token.type === \"array\") {\n                resultDataTokens.push({ type: \"leaf\", value: token.reference?.length });\n            }\n            const subTokens = token.reference?.map((hash) => registry[hash]);\n            subTokens?.forEach(token => {\n                this.createComplexObject(token, hashToIndex, registry, headerTokens, structure, resultDataTokens);\n            });\n        } else {\n            throw new Error(\"Invalid token type\");\n        }\n    }\n}","import Encoder from \"./Encoder\";\nimport * as fflate from 'fflate';\n\nexport default class FFlateEncoder implements Encoder {\n    encode(arrayBuffer: ArrayBuffer): ArrayBuffer {\n        return fflate.gzipSync(new Uint8Array(arrayBuffer)).buffer;\n    }\n    decode(arrayBuffer: ArrayBuffer): ArrayBuffer {\n        return fflate.gunzipSync(new Uint8Array(arrayBuffer)).buffer;\n    }\n\n}","export type Type = \"leaf\" | \"array\" | \"object\" | \"split\" | \"reference\" | \"complex\";\nexport type Hash = string;\n\nexport const SPLIT_REGEX = /\\W+/g;\nexport const TEST_REGEX = /(\\w{3,}\\W+){2,}|(\\W+\\w{3,}){2,}/\n\n/**\n * Token represent each chunk of data within an object.\n */\nexport default interface Token extends StoredToken {\n    hash: Hash;\n    files: Set<string>;\n    order: number;\n    count: number;\n    reference?: Hash[];\n    deleted?: boolean;\n}\n\n/**\n * A minimal version of a token, where we eliminate extra data like hash.\n */\nexport interface StoredToken {\n    type: Type;\n    value: any;\n}\n\n/**\n * Stored token with added debug field for easier debugging, and cache for extraction optimization.\n */\nexport interface ReducedToken extends StoredToken {\n    cache?: any;\n}\n\n/**\n * detect the type of a value\n *\n * @param value Value to analyze\n * @returns type of the value\n */\nexport function getType(value: any): Type {\n    if (Array.isArray(value)) {\n        return \"array\";\n    } else if (typeof value === \"object\" && value) {\n        return \"object\";\n    } else if (typeof value === \"string\" && new Set(value).size < 16) {\n        return \"leaf\";\n    } else if (typeof value === \"string\" && TEST_REGEX.test(value)) {\n        return \"split\";\n    } else {\n        return \"leaf\";\n    }\n}","import Loader from \"../io/Loader\";\nimport { Header } from \"./Header\";\nimport Token, { getType, Hash, SPLIT_REGEX } from \"./Token\";\nimport md5 from \"blueimp-md5\";\n/**\n * Class for spitting objects into tokens.\n */\nexport default class Tokenizer {\n    loader: Loader = new Loader();\n\n    /**\n     * Load json or text files and turn them into tokens.\n     * \n     * @param files files to load and reduce.\n     */\n    async load(...files: string[]): Promise<Header> {\n        if (files.some(file => typeof file !== \"string\")) {\n            throw new Error(\"Each argument passed to load must be a string.\");\n        }\n        const sortedFiles = files.sort();\n        const allData = await Promise.all(sortedFiles.map(this.loader.load));\n        const header = this.tokenize(Object.fromEntries(allData.map((data, index) => [sortedFiles[index], data])));\n        const textEncoder = new TextEncoder();\n        header.originalDataSize = textEncoder.encode(JSON.stringify(allData)).byteLength;\n        return header;\n    }\n\n    /**\n     * Takes a mapping of filename and their corresponding data, and turn them into tokens.\n     *\n     * @param items Mapping from filename to data.\n     * @returns All data stored as tokens.\n     */\n    tokenize(items: Record<string, any>) {\n        const header: Header = {\n            registry: {},\n            files: {},\n        };\n\n        const counter = { next: 0 };\n\n        Object.entries(items).forEach(([file, value]) => {\n            header.files[file] = {\n                nameToken: this.tokenizeHelper(file, header.registry, counter, \"header\"),\n                token: this.tokenizeHelper(value, header.registry, counter, file),\n            }\n        });\n\n        return header;\n    }\n\n    private registerToken(hash: Hash, value: any, registry: Record<Hash, Token>, counter: {next: number}, file: string, reference?: string[]) {\n        const entry = registry[hash] ?? (registry[hash] = {\n            type: getType(value),\n            hash,\n            value,\n            reference,\n            order: counter.next++,\n            count: 0,\n            files: new Set(),\n        });\n        entry.files.add(file);\n        entry.count++;\n        return entry;\n    }\n\n    private tokenizeHelper(item: any, registry: Record<Hash, Token>, counter: {next: number}, file: string): Token {\n        const type = getType(item);\n        if (type === \"array\") {\n            if (!Array.isArray(item)) {\n                throw new Error(\"item should be an array\");\n            }\n            const hashes = item.map(item => this.tokenizeHelper(item, registry, counter, file)).map(({hash}) => hash);\n            const hash = md5(hashes.join(\",\"));\n            return this.registerToken(hash, item, registry, counter, file, hashes);\n        } else if (type === \"object\") {\n            const entries = Object.entries(item);\n            const keysToken = this.tokenizeHelper(entries.map(([key]) => key), registry, counter, file);\n            const valuesToken = this.tokenizeHelper(entries.map(([,value]) => value), registry, counter, file);\n            const hash = md5(`${keysToken.hash}|${valuesToken.hash}`);\n            return this.registerToken(hash, item, registry, counter, file, [keysToken.hash, valuesToken.hash]);\n        } else if (type === \"split\") {\n            const chunks = item.split(SPLIT_REGEX);\n            const separators = item.match(SPLIT_REGEX);\n            const chunksToken = this.tokenizeHelper(chunks, registry, counter, file);\n            const separatorsToken = this.tokenizeHelper(separators, registry, counter, file);\n            const hash = md5(`${chunksToken.hash}-${separatorsToken.hash}`);\n            return this.registerToken(hash, item, registry, counter, file, [chunksToken.hash, separatorsToken.hash]);\n        } else {\n            const m = md5(JSON.stringify(item));\n            return this.registerToken(m, item, registry, counter, file);\n        }\n    }\n}","import { StructureType } from \"../compression/DataType\";\nimport { DataStore } from \"../reducer/Reducer\";\nimport { ReducedToken, Type } from \"../tokenizer/Token\";\n\n/**\n * Configuration that can be passed.\n * - cacheable: We can use cache to boost extraction speed. This uses a bit more memory.\n * This helps performance and memory, but can lead to weird side effects if the extracted object\n * gets modified.\n */\nexport interface ExtractionConfig {\n    cacheable: boolean;\n}\n\nconst DEFAULT_CONFIG: ExtractionConfig = {\n    cacheable: true,\n}\n\n/**\n * Class storing all data that can be extracted.\n */\nexport default class ExtractableData {\n    readonly extractor: Extractor = new Extractor();\n    readonly dataStore: DataStore;\n    readonly fileToSlot: Record<string, number>;\n    readonly config: ExtractionConfig;\n    readonly fileNames: string[];\n    readonly version?: string;\n    readonly originalDataSize?: number;\n    readonly compressedSize?: number;\n\n    constructor(dataStore: DataStore, config?: ExtractionConfig) {\n        this.dataStore = dataStore;\n        this.config = {\n            ...DEFAULT_CONFIG,\n            ...config,\n        };\n        this.fileNames = this.extractor.extractFileNames(dataStore.files, dataStore.headerTokens, this.config);\n        this.fileToSlot = Object.fromEntries(this.fileNames.map((file, index) => [file, index]));\n        this.version = dataStore.version;\n        this.originalDataSize = dataStore.originalDataSize;\n        this.compressedSize = dataStore.compressedSize;\n    }\n\n    /**\n     * Extract data form a stored file.\n     *\n     * @param filename filename to be extracted.\n     * @returns extracted data.\n     */\n    extract(filename: string) {\n        const slot = this.fileToSlot[filename];\n        const dataTokens = this.dataStore.getDataTokens(slot);\n        if (dataTokens) {\n            return this.extractor.extract(this.dataStore.headerTokens, dataTokens, this.config);\n        }\n    }\n\n    getHeaderTokens() {\n        return this.dataStore.headerTokens;\n    }\n}\n\nclass Extractor {\n    valueFetcher: Record<Type, undefined | ((token: ReducedToken, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig) => any)>;\n\n    constructor() {\n        this.valueFetcher = {\n            \"array\": this.getArray.bind(this),\n            \"leaf\": this.getLeaf.bind(this),\n            \"object\": this.getObject.bind(this),\n            \"split\": this.getSplit.bind(this),\n            \"reference\": this.getReference.bind(this),\n            \"complex\": undefined,\n        };\n    }\n\n    extractFileNames(files: number[], headerTokens: ReducedToken[], config: ExtractionConfig) {\n        return files.map(index => this.extractToken(index, headerTokens, undefined, config));\n    }\n\n    extract(headerTokens: ReducedToken[], dataTokens: ReducedToken[], config: ExtractionConfig) {\n        const tokenStream = dataTokens.entries();\n        const [,complexToken] = tokenStream.next().value;\n        const structure: StructureType[] = complexToken.value;\n        const token = this.extractComplex(structure.entries(), tokenStream, headerTokens, [...dataTokens], config);\n        return token;\n    }\n\n    private extractComplex(structure: Iterator<[number, StructureType]>, tokenStream: Iterator<[number, ReducedToken]>, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig): any {\n        const [, structureType] = structure.next().value;\n        switch (structureType) {\n            case StructureType.LEAF:\n                const [,leafToken]: [number, ReducedToken] = tokenStream.next().value;\n                const value = this.extractValueOrCache(leafToken, headerTokens, dataTokens, config, true, this.valueFetcher[leafToken.type]);\n                return value;\n            case StructureType.ARRAY:\n                const [,numToken]: [number, ReducedToken] = tokenStream.next().value;\n                const array = new Array(numToken.value).fill(null)\n                    .map(_ => this.extractComplex(structure, tokenStream, headerTokens, dataTokens, config));\n                return array;\n            case StructureType.OBJECT:\n                const keys: string[] = this.extractComplex(structure, tokenStream, headerTokens, dataTokens, config);\n                const values: any[] = this.extractComplex(structure, tokenStream, headerTokens, dataTokens, config);\n                const object = Object.fromEntries(keys.map((key, index) => [key, values[index]]));\n                return object;\n            case StructureType.SPLIT:\n                const chunks: string[] = this.extractComplex(structure, tokenStream, headerTokens, dataTokens, config);\n                const separators: string[] = this.extractComplex(structure, tokenStream, headerTokens, dataTokens, config);\n                const split = chunks.map((chunk, index) => `${chunk}${separators[index] ?? \"\"}`).join(\"\");\n                return split;\n\n        }\n    }\n\n    private extractToken(index: number, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined,\n            config: ExtractionConfig, allowUseCache?: boolean): any {\n        const token = index < headerTokens.length ? headerTokens[index] : dataTokens?.[index - headerTokens.length];\n        if (!token) {\n            throw new Error(\"Invalid token at index: \" + index);            \n        }\n        return this.extractValueOrCache(\n                token,\n                headerTokens,\n                dataTokens,\n                config,\n                allowUseCache,\n                this.valueFetcher[token.type]\n            );\n    }\n\n    private getLeaf(token: ReducedToken) {\n        return token.value;\n    }\n\n    private getReference(token: ReducedToken, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig): any {\n        const index = token.value;\n        return this.extractToken(index, headerTokens, dataTokens, config);\n    }\n\n    private getArray(token: ReducedToken, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig): any[] {\n        if (!Array.isArray(token.value)) {\n            throw new Error(\"Invalid array token\");\n        }\n        return token.value.map(index => this.extractToken(index, headerTokens, dataTokens, config));\n    }\n\n    private getObject(token: ReducedToken, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig): object {\n        const [keyIndex, valueIndex] = token.value;\n        const keys: string[] = this.extractToken(keyIndex, headerTokens, dataTokens, config, true);\n        const values = this.extractToken(valueIndex, headerTokens, dataTokens, config);\n        return Object.fromEntries(keys.map((key, index) => [key, values[index]]));\n    }\n\n    private getSplit(token: ReducedToken, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig): string {\n        const [chunksIndex, separatorsIndex] = token.value;\n        const chunks: string[] = this.extractToken(chunksIndex, headerTokens, dataTokens, config, true);\n        const separators: string[] = this.extractToken(separatorsIndex, headerTokens, dataTokens, config, true);\n        return chunks.map((chunk, index) => `${chunk}${separators[index] ?? \"\"}`).join(\"\");\n    }\n\n    private extractValueOrCache<T>(\n        token: ReducedToken,\n        headerTokens: ReducedToken[],\n        dataTokens: ReducedToken[] | undefined,\n        config: ExtractionConfig,\n        allowUseCache?: boolean,\n        getValue?: (token: ReducedToken, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig) => T): T {\n        \n        if (token.cache !== undefined && allowUseCache) {\n            return token.cache;\n        }\n\n        const value = getValue!(token, headerTokens, dataTokens, config);\n        if (config.cacheable && token.type !== \"leaf\") {\n            token.cache = value;\n        }\n        return value;\n    }\n}","import Reducer, { DataStore } from \"../reducer/Reducer\";\nimport { StreamDataView } from \"stream-data-view\";\nimport Encoder from \"./Encoder\";\nimport TokenEncoder from \"./TokenEncoder\";\nimport FFlateEncoder from \"./FFlateEncoder\";\nimport Tokenizer from \"../tokenizer/Tokenizer\";\nimport ExtractableData, { ExtractionConfig } from \"../expander/Extractor\";\n\nconst version = \"1.1.0\";\n\nenum EncoderEnum {\n    NONE = 0,\n    FFLATE = 1,\n};\n\nconst ENCODERS: (() => Encoder | undefined)[] = [\n    () => undefined,\n    () => new FFlateEncoder(),\n]\n\nconst DEFAULT: EncoderEnum[] = [EncoderEnum.FFLATE];\n\nexport default class Compressor {\n    private applyEncoders(buffer: ArrayBuffer, encoders: Encoder[]): ArrayBuffer {\n        let resultBuffer = buffer;\n        encoders.forEach(encoder => {\n            resultBuffer = encoder.encode(resultBuffer);\n        });\n        return resultBuffer;\n    }\n\n    private applyDecoders(buffer: ArrayBuffer, decoders: Encoder[]): ArrayBuffer {\n        let resultBuffer = buffer;\n        decoders.forEach(decoder => {\n            resultBuffer = decoder.decode(resultBuffer);\n        });\n        return resultBuffer;\n    }\n\n    /**\n     * Load json or text files and compress them into one big blob.\n     * This uses the default encoders.\n     * \n     * @param files files to load.\n     */\n    async loadAndCompress(files: string[]): Promise<ArrayBuffer> {\n        const tokenizer = new Tokenizer();\n        const header = await tokenizer.load(...files);\n\n        const reducer = new Reducer();\n        const dataStore = reducer.reduce(header);\n        return this.compressDataStore(dataStore);\n    }\n\n    /**\n     * Compress data into one big blob.\n     * This uses the default encoders.\n     * \n     * @param files files to load.\n     */\n    compress(data: Record<string, any>): ArrayBuffer {\n        const tokenizer = new Tokenizer();\n        const header = tokenizer.tokenize(data);\n\n        const reducer = new Reducer();\n        const dataStore = reducer.reduce(header);\n        return this.compressDataStore(dataStore);\n    }\n    \n    async loadAndExpand(file: string): Promise<ExtractableData> {\n        const response = await fetch(file);\n        const arrayBuffer = await response.arrayBuffer();\n        return this.expand(arrayBuffer);\n    }\n\n    expand(arrayBuffer: ArrayBuffer, config?: ExtractionConfig): ExtractableData {\n        return new ExtractableData(this.expandDataStore(arrayBuffer), config);\n    }\n\n    compressDataStore(dataStore: DataStore, encoderEnums: EncoderEnum[] = DEFAULT): ArrayBuffer {\n        const streamDataView = new StreamDataView();\n        const tokenEncoder: TokenEncoder = new TokenEncoder(streamDataView);\n\n        //  Write header tokens\n        tokenEncoder.encodeTokens(dataStore.headerTokens, true);\n        //  Write fileNames\n        tokenEncoder.encodeNumberArray(dataStore.files);\n\n        const finalStream = new StreamDataView();\n        //  Write version\n        finalStream.setNextUint8(version.length);\n        finalStream.setNextString(version);\n\n        //  Write encoders\n        encoderEnums.forEach(encoderEnum => finalStream.setNextUint8(encoderEnum));\n        finalStream.setNextUint8(0);\n\n        const encoders: Encoder[] = encoderEnums\n            .map(encoderEnum => ENCODERS[encoderEnum]())\n            .filter((encoder): encoder is Encoder => !!encoder);\n\n        //  Write header\n        const headerBuffer = this.applyEncoders(streamDataView.getBuffer(), encoders);\n        finalStream.setNextUint32(headerBuffer.byteLength);\n        finalStream.setNextBytes(headerBuffer);\n        console.log(\"HEADER length\", headerBuffer.byteLength);\n\n        //  Write each file's data tokens.\n        for (let index = 0; index < dataStore.files.length; index++) {\n            const subStream = new StreamDataView();\n            const subEncoder = new TokenEncoder(subStream);\n            subEncoder.encodeTokens(dataStore.getDataTokens(index)!, false);\n\n            //  save and compress buffer\n            const subBuffer = this.applyEncoders(subStream.getBuffer(), encoders);\n            finalStream.setNextUint32(subBuffer.byteLength);\n            console.log(\"SUBBUFFER length\", index, subBuffer.byteLength);\n            finalStream.setNextBytes(subBuffer);\n        }\n        finalStream.setNextUint32(0);\n\n        //  Write original data size\n        finalStream.setNextUint32(dataStore.originalDataSize ?? 0);\n\n        return finalStream.getBuffer();\n    }\n\n    expandDataStore(arrayBuffer: ArrayBuffer): DataStore {\n        const compressedSize = arrayBuffer.byteLength;\n        let input = arrayBuffer;\n        const globalStream = new StreamDataView(input);\n        const version = globalStream.getNextString(globalStream.getNextUint8());\n        const decoders: Encoder[] = [];\n        do {\n            const encoderEnum = globalStream.getNextUint8();\n            if (encoderEnum === EncoderEnum.NONE) {\n                break;\n            }\n            const decoder = ENCODERS[encoderEnum]?.();\n            if (decoder) {\n                decoders.push(decoder);\n            }\n        } while(globalStream.getOffset() < globalStream.getLength());\n\n        const headerByteLength = globalStream.getNextUint32();\n        const headerBuffer = this.applyDecoders(globalStream.getNextBytes(headerByteLength).buffer, decoders);\n\n        const headerTokenEncoder = new TokenEncoder(new StreamDataView(headerBuffer));\n        const headerTokens = headerTokenEncoder.decodeTokens(true);\n        const files = headerTokenEncoder.decodeNumberArray();\n\n        const subBuffers: ArrayBuffer[] = [];\n        do {\n            const byteLength = globalStream.getNextUint32();\n            if (!byteLength) {\n                break;\n            }\n            subBuffers.push(globalStream.getNextBytes(byteLength).buffer);\n        } while(globalStream.getOffset() < globalStream.getLength())\n\n        const getDataTokens = (index: number) => {\n            const subBuffer = this.applyDecoders(subBuffers[index], decoders);\n            const streamDataView = new StreamDataView(subBuffer);\n            const tokenDecoder = new TokenEncoder(streamDataView);\n            return tokenDecoder.decodeTokens(false);\n        }\n\n        //  The remaining from streamDataView is extra. Some compressed data don't have it.\n        let originalDataSize;\n        try {\n            originalDataSize = globalStream.getNextUint32() || undefined;\n        } catch (e) {\n        }\n\n        return {\n            version,\n            originalDataSize,\n            compressedSize,\n            headerTokens,\n            files,\n            getDataTokens,\n        }\n    }\n}\n","import Loader from \"./io/Loader\";\nimport TokenEncoder from \"./compression/TokenEncoder\";\nimport Compressor from \"./compression/Compressor\";\n\nconst exportedClasses = {\n  Loader,\n  Compressor,\n  TokenEncoder,\n}\n\nexport default exportedClasses;\n"],"names":["yaml","require","extension","file","split","pop","Loader","_proto","prototype","load","fetch","then","response","_exit","_temp2","_result","Promise","resolve","json","text","_temp","_load","_response$text","_yaml$load","call","e","reject","StructureType","DataType","NUMBER_DATA_TYPES","UINT8","INT8","UINT16","INT16","UINT32","INT32","FLOAT32","FLOAT64","DataTypeUtils","numberSatisfyDataType","value","dataType","hasDecimal","Math","fround","getBestType","array","some","number","every","_this","min","apply","max","_i","_NUMBER_DATA_TYPES","length","getNumberDataType","_i2","_NUMBER_DATA_TYPES2","type","UNDEFINED","getStringDataType","letterCodes","map","l","charCodeAt","code","STRING","UNICODE","getFullTokenDataType","token","ARRAY_8","OBJECT_8","SPLIT_8","getDataType","COMPLEX_OBJECT","indices","console","assert","EMPTY_ARRAY","offset","bestType","OBJECT_16","OBJECT_32","SPLIT_16","SPLIT_32","OFFSET_ARRAY_8","OFFSET_ARRAY_16","OFFSET_ARRAY_32","ARRAY_16","ARRAY_32","undefined","NULL","BOOLEAN_TRUE","BOOLEAN_FALSE","REFERENCE_8","REFERENCE_16","REFERENCE_32","Error","dataTypeToType","typeToStructureType","LEAF","ARRAY","OBJECT","SPLIT","MAX_ARRAY_SIZE","TokenEncoder","streamDataView","dataTypeUtils","encodeTokens","tokens","organized","pos","count","encodeMulti","decodeTokens","getOffset","getLength","decodeMulti","encodeToken","multiInfo","usedDataType","encodeDataType","encodeSingleNumber","encodeString","encodeObjectToken","encodeSplitToken","encodeArrayToken","encodeReferenceToken","encodeComplexToken","decodeToken","decodeDataType","UINT2","UINT4","decodeSingleNumber","decodeString","decodeObjectToken","decodeSplitToken","decodeArrayToken","decodeReferenceToken","decodeComplexToken","isOffsetDataType","arrayToken","numberType","encodeNumberArray","decodeNumberArray","objectToken","_objectToken$value","keysIndex","valuesIndex","splitToken","_splitToken$value","chunksIndex","separatorsIndex","index","structure","setNextUint8","getNextUint8","firstType","multiCount","maxCount","i","push","setNextInt8","setNextUint16","setNextInt16","setNextUint32","setNextInt32","setNextFloat32","setNextFloat64","getNextInt8","getNextUint16","getNextInt16","getNextUint32","getNextInt32","getNextFloat32","getNextFloat64","bit2ToNum","_ref","a","b","c","d","numToBit2","n","size","slice","bit4ToNum","_ref2","numToBit4","stride","transform","bytes","_iterator","_createForOfIteratorHelperLoose","_step","done","byte","sizeDiff","numbers","lastStringLength","forEach","charCodes","string","String","fromCharCode","join","selfTest","testers","tokenEncoder","tokenDecoder","reset","_this2","testAction","header","result","Array","fill","_","o","parseInt","tester","StreamDataView","encoder","decoder","resetOffset","info","encode","decode","check","JSON","stringify","decoded","Reducer","reduce","hashToIndex","headerTokens","createReducedHeaderTokens","filterSplit","Object","values","registry","filter","files","has","fileEntries","entries","sort","name1","name2","localeCompare","_ref3","nameToken","hash","dataTokens","_ref4","root","subHashToIndex","_extends","createComplexObject","originalDataSize","getDataTokens","sortTokens","t1","t2","organizeTokens","buckets","bucket","_buckets","resultTokens","_token$reference","reference","chunskHash","separatorsHash","chunksToken","separatorsToken","deleted","_ref5","organizedTokens","_ref6","_token$reference$map","_token$reference2","resultDataTokens","_token$reference4","_token$reference3","subTokens","_this3","FFlateEncoder","arrayBuffer","fflate","Uint8Array","buffer","SPLIT_REGEX","TEST_REGEX","getType","isArray","Set","test","Tokenizer","_len","arguments","_key","sortedFiles","all","loader","allData","tokenize","fromEntries","data","textEncoder","TextEncoder","byteLength","items","counter","next","tokenizeHelper","registerToken","entry","_registry$hash","order","add","item","hashes","md5","keysToken","key","valuesToken","chunks","separators","match","m","DEFAULT_CONFIG","cacheable","ExtractableData","dataStore","config","Extractor","fileNames","extractor","extractFileNames","fileToSlot","version","compressedSize","extract","filename","slot","getHeaderTokens","valueFetcher","getArray","bind","getLeaf","getObject","getSplit","getReference","_proto2","extractToken","tokenStream","_tokenStream$next$val","complexToken","extractComplex","concat","_structure$next$value","structureType","_tokenStream$next$val2","leafToken","extractValueOrCache","_tokenStream$next$val3","numToken","keys","object","chunk","_separators$index","allowUseCache","_token$value","keyIndex","valueIndex","_token$value2","_separators$index2","getValue","cache","EncoderEnum","ENCODERS","DEFAULT","FFLATE","Compressor","applyEncoders","encoders","resultBuffer","applyDecoders","decoders","loadAndCompress","tokenizer","reducer","compressDataStore","compress","loadAndExpand","expand","expandDataStore","encoderEnums","finalStream","setNextString","encoderEnum","headerBuffer","getBuffer","setNextBytes","log","subStream","subEncoder","subBuffer","_dataStore$originalDa","input","globalStream","getNextString","_ENCODERS$encoderEnum","NONE","headerByteLength","getNextBytes","headerTokenEncoder","subBuffers","exportedClasses"],"mappings":"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"}