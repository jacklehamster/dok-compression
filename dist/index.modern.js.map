{"version":3,"file":"index.modern.js","sources":["../src/io/Loader.ts","../src/compression/DataType.ts","../src/compression/TokenEncoder.ts","../src/reducer/Reducer.ts","../src/compression/FFlateEncoder.ts","../src/tokenizer/Token.ts","../src/tokenizer/Tokenizer.ts","../src/expander/Extractor.ts","../src/compression/Compressor.ts","../src/index.tsx"],"sourcesContent":["import fetch from \"cross-fetch\";\nconst yaml = require('js-yaml');\n\nfunction extension(file: string) {\n    return file.split(\".\").pop();\n}\n\nexport type IFetcher<T> = (file: string) => Promise<T>;\n\nexport default class Loader {\n    async load(file: string, fetcher?: IFetcher<string>): Promise<any> {\n        const text = await (fetcher ?? Loader.BrowserFetcher)(file);\n        if (extension(file) === \"yaml\" || extension(file) === \"yml\") {\n            return yaml.load(text);\n        }\n        return extension(file) === \"json\" ? JSON.parse(text) : text;\n    }\n\n    static BrowserFetcher: IFetcher<string> = (file: string): Promise<string> => {\n        return fetch(file).then(response => response.text());\n    }\n\n    static ArrayBufferFetcher:IFetcher<ArrayBuffer> = (file: string): Promise<ArrayBuffer> => {\n        return fetch(file).then(response => response.arrayBuffer());\n    }\n}\n","import Token, { StoredToken, Type } from \"../tokenizer/Token\";\n\nexport enum StructureType {\n    LEAF = 0,\n    ARRAY = 1,\n    OBJECT = 2,\n    SPLIT = 3,\n};\n\nexport enum DataType {\n    UNDEFINED = 0,\n    NULL = 1,\n    BOOLEAN_FALSE = 2,\n    BOOLEAN_TRUE = 3,\n    INT8 = 4,\n    UINT8 = 5,\n    INT16 = 6,\n    UINT16 = 7,\n    INT32 = 8,\n    UINT32 = 9,\n    FLOAT32 = 10,\n    FLOAT64 = 11,\n    STRING = 12,\n    UNICODE = 13,\n    OBJECT_8 = 17,\n    OBJECT_16 = 18,\n    OBJECT_32 = 19,\n    SPLIT_8 = 20,\n    SPLIT_16 = 21,\n    SPLIT_32 = 22,\n    ARRAY_8 = 23,\n    ARRAY_16 = 24,\n    ARRAY_32 = 25,\n    OFFSET_ARRAY_8 = 26,\n    OFFSET_ARRAY_16 = 27,\n    OFFSET_ARRAY_32 = 28,\n    EMPTY_ARRAY = 29,\n    REFERENCE_8 = 30,\n    REFERENCE_16 = 31,\n    REFERENCE_32 = 32,\n    COMPLEX_OBJECT = 33,\n    UINT2 = 34,\n    UINT4 = 35,\n}\n\nexport const NUMBER_DATA_TYPES = [\n    DataType.UINT8,\n    DataType.INT8,\n    DataType.UINT16,\n    DataType.INT16,\n    DataType.UINT32,\n    DataType.INT32,\n    DataType.FLOAT32,\n    DataType.FLOAT64,\n];\n\nexport class DataTypeUtils {\n    numberSatisfyDataType(value: number, dataType: DataType): boolean {\n        const hasDecimal = value % 1 !== 0;\n        if (hasDecimal) {\n            switch (dataType) {\n                case DataType.FLOAT32:\n                    return Math.fround(value) === value;\n                case DataType.FLOAT64:\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        switch (dataType) {\n            case DataType.UINT2:\n                return value >= 0 && value < 4;\n            case DataType.UINT4:\n                return value >= 0 && value < 16;\n            case DataType.UINT8:\n                return value >= 0 && value <= 255;\n            case DataType.INT8:\n                return value >= -128 && value <= 127;\n            case DataType.UINT16:\n                return value >= 0 && value <= 65535;\n            case DataType.INT16:\n                return value >= -32768 && value <= 32767;\n            case DataType.UINT32:\n                return value >= 0;\n            case DataType.INT32:\n                return true;\n            case DataType.FLOAT32:\n                return Math.fround(value) === value;\n            case DataType.FLOAT64:\n                return true;\n        }\n        return false;\n    }\n\n    getBestType(array: number[]): DataType {\n        if (array.some(number => number % 1 !== 0)) {\n            //  decimal\n            if (array.every(number => this.numberSatisfyDataType(number, DataType.FLOAT32))) {\n                return DataType.FLOAT32;\n            }\n            return DataType.FLOAT64;\n        }\n\n        const min = Math.min(...array);\n        const max = Math.max(...array);\n\n        for (const dataType of NUMBER_DATA_TYPES) {\n            if (this.numberSatisfyDataType(min, dataType) && this.numberSatisfyDataType(max, dataType)) {\n                return dataType;\n            }\n        }\n        return DataType.FLOAT64;\n    }\n\n\n    getNumberDataType(value: number): DataType {\n        for (const type of NUMBER_DATA_TYPES) {\n            if (this.numberSatisfyDataType(value, type)) {\n                return type;\n            }\n        }\n        return DataType.UNDEFINED;\n    }\n\n    getStringDataType(value: string): DataType {\n        const letterCodes = Array.from(value).map(l => l.charCodeAt(0));\n\n        if (letterCodes.every(code => code <= 255)) {\n            return DataType.STRING;\n        } else {\n            return DataType.UNICODE;\n        }\n    }\n\n    getFullTokenDataType(token: Token): DataType {\n        switch (token.type) {\n            case \"array\":\n                return DataType.ARRAY_8;\n            case \"object\":\n                return DataType.OBJECT_8;\n            case \"split\":\n                return DataType.SPLIT_8;\n            default:\n                return this.getDataType(token);\n        }\n    }\n\n    getDataType(token: StoredToken): DataType {\n        switch (token.type) {\n            case \"complex\":\n                return DataType.COMPLEX_OBJECT;\n            case \"array\":\n            case \"object\":\n            case \"split\":\n                let indices: number[] = token.value;\n                if (!indices.length) {\n                    console.assert(token.type === \"array\");\n                    return DataType.EMPTY_ARRAY;\n                }\n                let offset = 0;\n                if (token.type === \"array\" && indices.length > 3) {\n                    const min = Math.min(...indices);\n                    const max = Math.max(...indices);\n                    if (this.getNumberDataType(max - min) !== this.getNumberDataType(max)) {\n                        offset = min;\n                    }\n                    indices = indices.map(value => value - offset);\n                }\n                const bestType: DataType = this.getBestType(indices);\n                switch (token.type) {\n                    case \"object\":\n                        return bestType === DataType.UINT8\n                            ? DataType.OBJECT_8\n                            : bestType === DataType.UINT16\n                                ? DataType.OBJECT_16\n                                : DataType.OBJECT_32;\n                    case \"split\":\n                        return bestType === DataType.UINT8\n                            ? DataType.SPLIT_8\n                            : bestType === DataType.UINT16\n                                ? DataType.SPLIT_16\n                                : DataType.SPLIT_32;\n                    case \"array\":\n                        if (offset) {\n                            return bestType === DataType.UINT8\n                                ? DataType.OFFSET_ARRAY_8\n                                : bestType === DataType.UINT16\n                                    ? DataType.OFFSET_ARRAY_16\n                                    : DataType.OFFSET_ARRAY_32;\n                        } else {\n                            return bestType === DataType.UINT8\n                                ? DataType.ARRAY_8\n                                : bestType === DataType.UINT16\n                                    ? DataType.ARRAY_16\n                                    : DataType.ARRAY_32;\n                        }\n                }\n            case \"leaf\":\n                if (token.value === undefined) {\n                    return DataType.UNDEFINED;\n                } else if (token.value === null) {\n                    return DataType.NULL;\n                } else {\n                    switch (typeof token.value) {\n                        case \"boolean\":\n                            return token.value ? DataType.BOOLEAN_TRUE : DataType.BOOLEAN_FALSE;\n                        case \"string\":\n                            return this.getStringDataType(token.value);\n                        case \"number\":\n                            return this.getNumberDataType(token.value);\n                    }\n                }\n                break;\n            case \"reference\":\n                switch (this.getNumberDataType(token.value)) {\n                    case DataType.UINT8:\n                        return DataType.REFERENCE_8;\n                    case DataType.UINT16:\n                        return DataType.REFERENCE_16;\n                    case DataType.UINT32:\n                        return DataType.REFERENCE_32;\n                }\n                throw new Error(\"Invalid reference value: \" + token.value);\n        }\n        throw new Error(`Unrecognized type for ${token.type} value: ${token.value}`);\n    }\n\n    dataTypeToType(dataType: DataType): Type {\n        switch (dataType) {\n            case DataType.COMPLEX_OBJECT:\n                return \"complex\";\n            case DataType.EMPTY_ARRAY:\n            case DataType.ARRAY_8:\n            case DataType.ARRAY_16:\n            case DataType.ARRAY_32:\n                return \"array\";\n            case DataType.OBJECT_8:\n            case DataType.OBJECT_16:\n            case DataType.OBJECT_32:\n                return \"object\";\n            case DataType.SPLIT_8:\n            case DataType.SPLIT_16:\n            case DataType.SPLIT_32:\n                return \"split\";\n            case DataType.REFERENCE_8:\n            case DataType.REFERENCE_16:\n            case DataType.REFERENCE_32:\n                return \"reference\";\n            default:\n                return \"leaf\";\n        }\n    }\n\n    typeToStructureType(type: Type): StructureType {\n        switch (type) {\n            case \"leaf\":\n                return StructureType.LEAF;\n            case \"array\":\n                return StructureType.ARRAY;\n            case \"object\":\n                return StructureType.OBJECT;\n            case \"split\":\n                return StructureType.SPLIT;\n        }\n        throw new Error(\"Cannot translate to structure type: \" + type);\n    }\n}\n","//13093\nimport { StreamDataView } from \"stream-data-view\";\nimport { ReducedToken } from \"../tokenizer/Token\";\nimport { DataType, DataTypeUtils } from \"./DataType\";\n\ninterface MultiInfo {\n    organized: boolean;\n    lastStringLength?: number;\n}\n\nconst MAX_ARRAY_SIZE = 255;\n\nexport default class TokenEncoder {\n    streamDataView: StreamDataView;\n    dataTypeUtils: DataTypeUtils;\n\n    constructor(streamDataView: StreamDataView) {\n        this.streamDataView = streamDataView;\n        this.dataTypeUtils = new DataTypeUtils();\n    }\n\n    encodeTokens(tokens: ReducedToken[], organized: boolean) {\n        let pos = 0;\n        while (pos < tokens.length) {\n            const count = this.encodeMulti(tokens, pos, organized);\n            if (count) {\n                pos += count;\n            }\n        }\n        this.encodeMulti([], pos, organized);\n    }\n\n    decodeTokens(organized: boolean) {\n        const tokens: ReducedToken[] = [];\n        while (this.streamDataView.getOffset() < this.streamDataView.getLength()) {\n            if (!this.decodeMulti(tokens, organized)) {\n                break;\n            }\n        }\n        return tokens;\n    }\n\n    encodeToken(token: ReducedToken, dataType?: DataType, multiInfo?: MultiInfo): void {\n        const usedDataType: DataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getDataType(token));\n        switch (usedDataType) {\n            case DataType.UNDEFINED:\n            case DataType.NULL:\n            case DataType.BOOLEAN_TRUE:\n            case DataType.BOOLEAN_FALSE:\n            case DataType.EMPTY_ARRAY:\n                break;\n            case DataType.INT8:\n            case DataType.UINT8:\n            case DataType.INT16:\n            case DataType.UINT16:\n            case DataType.INT32:\n            case DataType.UINT32:\n            case DataType.FLOAT32:\n            case DataType.FLOAT64:\n                this.encodeSingleNumber(token.value, usedDataType);\n                break;\n            case DataType.STRING:\n            case DataType.UNICODE:\n                this.encodeString(token.value, usedDataType, multiInfo);\n                break;\n            case DataType.OBJECT_8:\n            case DataType.OBJECT_16:\n            case DataType.OBJECT_32:\n                this.encodeObjectToken(token, usedDataType);\n                break;\n            case DataType.SPLIT_8:\n            case DataType.SPLIT_16:\n            case DataType.SPLIT_32:\n                this.encodeSplitToken(token, usedDataType);\n                break;\n            case DataType.ARRAY_8:\n            case DataType.ARRAY_16:\n            case DataType.ARRAY_32:\n            case DataType.OFFSET_ARRAY_8:\n            case DataType.OFFSET_ARRAY_16:\n            case DataType.OFFSET_ARRAY_32:\n                this.encodeArrayToken(token, usedDataType);\n                break;\n            case DataType.REFERENCE_8:\n            case DataType.REFERENCE_16:\n            case DataType.REFERENCE_32:\n                this.encodeReferenceToken(token, usedDataType);\n                break;\n            case DataType.COMPLEX_OBJECT:\n                this.encodeComplexToken(token, usedDataType);\n                break;\n            default:\n                throw new Error(\"Invalid dataType: \" + usedDataType);\n        }\n    }\n\n    decodeToken(dataType?: DataType, multiInfo?: MultiInfo): ReducedToken {\n        const usedDataType = dataType ?? this.decodeDataType();\n        switch (usedDataType) {\n            case DataType.UNDEFINED:\n                return { type: \"leaf\", value: undefined };\n            case DataType.NULL:\n                return { type: \"leaf\", value: null };\n            case DataType.BOOLEAN_TRUE:\n                return { type: \"leaf\", value: true };\n            case DataType.BOOLEAN_FALSE:\n                return { type: \"leaf\", value: false };\n            case DataType.EMPTY_ARRAY:\n                return { type: \"array\", value: [] };\n            case DataType.UINT2:\n            case DataType.UINT4:\n                throw new Error(\"Use decode number array.\");\n            case DataType.INT8:\n            case DataType.UINT8:\n            case DataType.INT16:\n            case DataType.UINT16:\n            case DataType.INT32:\n            case DataType.UINT32:\n            case DataType.FLOAT32:\n            case DataType.FLOAT64:\n                return { type: \"leaf\", value: this.decodeSingleNumber(usedDataType) };\n            case DataType.STRING:\n            case DataType.UNICODE:\n                return { type: \"leaf\", value: this.decodeString(usedDataType, multiInfo) };\n            case DataType.OBJECT_8:\n            case DataType.OBJECT_16:\n            case DataType.OBJECT_32:\n                return this.decodeObjectToken(usedDataType);\n            case DataType.SPLIT_8:\n            case DataType.SPLIT_16:\n            case DataType.SPLIT_32:\n                return this.decodeSplitToken(usedDataType);\n            case DataType.ARRAY_8:\n            case DataType.ARRAY_16:\n            case DataType.ARRAY_32:\n            case DataType.OFFSET_ARRAY_8:\n            case DataType.OFFSET_ARRAY_16:\n            case DataType.OFFSET_ARRAY_32:\n                return this.decodeArrayToken(usedDataType);\n            case DataType.REFERENCE_8:\n            case DataType.REFERENCE_16:\n            case DataType.REFERENCE_32:\n                return this.decodeReferenceToken(usedDataType);\n            case DataType.COMPLEX_OBJECT:\n                return this.decodeComplexToken(usedDataType);\n            default:\n                throw new Error(\"Invalid dataType: \" + usedDataType);\n        }\n    }\n\n    isOffsetDataType(dataType: DataType) {\n        return dataType === DataType.OFFSET_ARRAY_8 || dataType === DataType.OFFSET_ARRAY_16 || dataType === DataType.OFFSET_ARRAY_32;\n    }\n\n    encodeArrayToken(arrayToken: ReducedToken, dataType?: DataType) {\n        const usedDataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getDataType(arrayToken));\n        const numberType = usedDataType === DataType.ARRAY_8 || usedDataType === DataType.OFFSET_ARRAY_8\n            ? DataType.UINT8\n            : usedDataType === DataType.ARRAY_16 || usedDataType === DataType.OFFSET_ARRAY_16\n                ? DataType.UINT16 : DataType.UINT32;\n\n        let indices = arrayToken.value;\n        if (this.isOffsetDataType(usedDataType)) {\n            const offset = Math.min(...indices);\n            indices = indices.map((value: number) => value - offset);\n            this.encodeSingleNumber(offset);\n        }\n\n        this.encodeNumberArray(indices, numberType);\n    }\n\n    decodeArrayToken(dataType?: DataType): ReducedToken {\n        const usedDataType = dataType ?? this.decodeDataType();\n\n        let offset = 0;\n        if (this.isOffsetDataType(usedDataType)) {\n            offset = this.decodeSingleNumber();\n        }\n\n        const numberType = usedDataType === DataType.ARRAY_8 || usedDataType === DataType.OFFSET_ARRAY_8\n            ? DataType.UINT8\n            : usedDataType === DataType.ARRAY_16 || usedDataType === DataType.OFFSET_ARRAY_16\n                ? DataType.UINT16 : DataType.UINT32;\n        const indices = this.decodeNumberArray(numberType)\n            .map(value => value + offset);\n        return {\n            type: \"array\",\n            value: indices,\n        }\n    }\n\n    encodeObjectToken(objectToken: ReducedToken, dataType?: DataType) {\n        const usedDataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getDataType(objectToken));\n        const numberType = usedDataType === DataType.OBJECT_8 ? DataType.UINT8 : usedDataType === DataType.OBJECT_16 ? DataType.UINT16 : DataType.UINT32;\n        const [keysIndex, valuesIndex] = objectToken.value;\n        this.encodeSingleNumber(keysIndex, numberType);\n        this.encodeSingleNumber(valuesIndex, numberType);\n    }\n\n    decodeObjectToken(dataType?: DataType): ReducedToken {\n        const usedDataType = dataType ?? this.decodeDataType();\n        const numberType = usedDataType === DataType.OBJECT_8 ? DataType.UINT8 : usedDataType === DataType.OBJECT_16 ? DataType.UINT16 : DataType.UINT32;\n        return {\n            type: \"object\",\n            value: [this.decodeSingleNumber(numberType), this.decodeSingleNumber(numberType)],\n        };\n    }\n\n    encodeSplitToken(splitToken: ReducedToken, dataType?: DataType) {\n        const usedDataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getDataType(splitToken));\n        const numberType = usedDataType === DataType.SPLIT_8 ? DataType.UINT8 : usedDataType === DataType.SPLIT_16 ? DataType.UINT16 : DataType.UINT32;\n        const [chunksIndex, separatorsIndex] = splitToken.value;\n        this.encodeSingleNumber(chunksIndex, numberType);\n        this.encodeSingleNumber(separatorsIndex, numberType);\n    }\n\n    decodeSplitToken(dataType?: DataType): ReducedToken {\n        const usedDataType = dataType ?? this.decodeDataType();\n        const numberType = usedDataType === DataType.SPLIT_8 ? DataType.UINT8 : usedDataType === DataType.SPLIT_16 ? DataType.UINT16 : DataType.UINT32;\n        return {\n            type: \"split\",\n            value: [this.decodeSingleNumber(numberType), this.decodeSingleNumber(numberType)],\n        };\n    }\n\n    encodeReferenceToken(token: ReducedToken, dataType?: DataType) {\n        const usedDataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getDataType(token));\n        const numberType = usedDataType === DataType.REFERENCE_8 ? DataType.UINT8 : usedDataType === DataType.REFERENCE_16 ? DataType.UINT16 : DataType.UINT32;\n        const index = token.value;\n        this.encodeSingleNumber(index, numberType);\n    }\n\n    decodeReferenceToken(dataType?: DataType): ReducedToken {\n        const usedDataType = dataType ?? this.decodeDataType();\n        const numberType = usedDataType === DataType.REFERENCE_8 ? DataType.UINT8 : usedDataType === DataType.REFERENCE_16 ? DataType.UINT16 : DataType.UINT32;\n        return {\n            type: \"reference\",\n            value: this.decodeSingleNumber(numberType),\n        };\n    }\n\n    encodeComplexToken(token: ReducedToken, dataType?: DataType) {\n        if (dataType === undefined) {\n            this.encodeDataType(this.dataTypeUtils.getDataType(token));\n        }\n        const structure = token.value;\n        this.encodeNumberArray(structure, DataType.UINT2);\n    }\n\n    decodeComplexToken(dataType?: DataType): ReducedToken {\n        const usedDataType = dataType ?? this.decodeDataType();\n        const structure = this.decodeNumberArray(DataType.UINT2);\n        return {\n            type: this.dataTypeUtils.dataTypeToType(usedDataType),\n            value: structure,\n        };\n    }\n\n    encodeDataType(dataType: DataType): DataType {\n        this.streamDataView.setNextUint8(dataType);\n        return dataType;\n    }\n\n    decodeDataType(): DataType {\n        const dataType = this.streamDataView.getNextUint8();\n        return dataType;\n    }\n\n    encodeMulti(tokens: ReducedToken[], pos: number, organized: boolean): number {\n        if (pos >= tokens.length) {\n            this.encodeSingleNumber(0, DataType.UINT8);\n            return 0;\n        }\n        const firstType = this.dataTypeUtils.getDataType(tokens[pos]);\n        let multiCount;\n        const maxCount = Math.min(tokens.length - pos, 255);\n        for (multiCount = 1; multiCount < maxCount; multiCount++) {\n            if (this.dataTypeUtils.getDataType(tokens[pos + multiCount]) !== firstType) {\n                break;\n            }\n        }\n        //  encode a multi, meaning that the same type is going to get repeated multiple times\n        this.encodeSingleNumber(multiCount, DataType.UINT8);\n        this.encodeDataType(firstType);\n        const multiInfo: MultiInfo = { organized };\n        for (let i = 0; i < multiCount; i++) {\n            this.encodeToken(tokens[pos + i], firstType, multiInfo);\n        }\n        return multiCount;\n    }\n\n    decodeMulti(tokens: ReducedToken[], organized: boolean): number {\n        const count = this.streamDataView.getNextUint8();\n        if (!count) {\n            return 0;\n        }\n        const dataType = this.decodeDataType();\n        const multiInfo: MultiInfo = { organized };\n        for (let i = 0; i < count; i++) {\n            const token = this.decodeToken(dataType, multiInfo);\n            tokens.push(token);\n        }\n        return count;\n    }\n\n    encodeSingleNumber(value: number, dataType?: DataType) {\n        const usedDataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getNumberDataType(value));\n\n        switch (usedDataType) {\n            case DataType.UINT2:\n            case DataType.UINT4:\n                throw new Error(\"Use encode number array.\");\n            case DataType.UINT8:\n                this.streamDataView.setNextUint8(value);\n                break;\n            case DataType.INT8:\n                this.streamDataView.setNextInt8(value);\n                break;\n            case DataType.UINT16:\n                this.streamDataView.setNextUint16(value);\n                break;\n            case DataType.INT16:\n                this.streamDataView.setNextInt16(value);\n                break;\n            case DataType.UINT32:\n                this.streamDataView.setNextUint32(value);\n                break;\n            case DataType.INT32:\n                this.streamDataView.setNextInt32(value);\n                break;\n            case DataType.FLOAT32:\n                this.streamDataView.setNextFloat32(value);\n                break;\n            case DataType.FLOAT64:\n                this.streamDataView.setNextFloat64(value);\n                break;\n            default:\n                throw new Error(\"Invalid dataType for number: \" + usedDataType);\n        }\n    }\n\n    decodeSingleNumber(dataType?: DataType): number {\n        const usedDataType = dataType ?? this.decodeDataType();\n\n        switch (usedDataType) {\n            case DataType.UINT2:\n            case DataType.UINT4:\n                throw new Error(\"Use decode number array.\");\n            case DataType.UINT8:\n                return this.streamDataView.getNextUint8();\n            case DataType.INT8:\n                return this.streamDataView.getNextInt8();\n            case DataType.UINT16:\n                return this.streamDataView.getNextUint16();\n            case DataType.INT16:\n                return this.streamDataView.getNextInt16();\n            case DataType.UINT32:\n                return this.streamDataView.getNextUint32();\n            case DataType.INT32:\n                return this.streamDataView.getNextInt32();\n            case DataType.FLOAT32:\n                return this.streamDataView.getNextFloat32();\n            case DataType.FLOAT64:\n                return this.streamDataView.getNextFloat64();\n            default:\n                throw new Error(\"Invalid dataType for number: \" + usedDataType);\n        }\n    }\n\n    bit2ToNum([a, b, c, d]: number[]): number {\n        return ((a ?? 0) << 0) | ((b ?? 0) << 2) | ((c ?? 0) << 4) | ((d ?? 0) << 6);\n    }\n\n    numToBit2(n: number, size: number = 4): number[] {\n        return [(n >> 0) & 3, (n >> 2) & 3, (n >> 4) & 3, (n >> 6) & 3].slice(0, size);\n    }\n\n    bit4ToNum([a, b]: number[]): number {\n        return ((a ?? 0) << 0) | ((b ?? 0) << 4);\n    }\n\n    numToBit4(n: number, size: number = 2): number[] {\n        return [(n >> 0) & 15, (n >> 4) & 15].slice(0, size);\n    }\n\n    encodeNumberArray(array: number[], dataType?: DataType) {\n        if (dataType === DataType.UINT2 || dataType === DataType.UINT4) {\n            const stride = dataType === DataType.UINT2 ? 4 : 2;\n            const transform = dataType === DataType.UINT2 ? this.bit2ToNum : this.bit4ToNum;\n            const bytes = [];\n            for (let i = 0; i < array.length; i += stride) {\n                bytes.push(transform(array.slice(i, i + stride)));\n            }\n            this.encodeNumberArray(bytes, DataType.UINT8);\n            this.encodeSingleNumber(array.length - bytes.length * stride, DataType.INT8);\n            return;\n        }\n\n        let pos;\n        for (pos = 0; pos < array.length;) {\n            const size = Math.min(MAX_ARRAY_SIZE, array.length - pos);\n            this.encodeSingleNumber(size, DataType.UINT8);\n            if (!size) {\n                break;\n            }\n\n            const bestType: DataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getBestType(array));\n\n            for (let i = 0; i < size; i++) {\n                this.encodeSingleNumber(array[pos + i], bestType);\n            }\n\n            pos += size;\n        }\n        if (pos === MAX_ARRAY_SIZE) {\n            //  Reached the max size, but the next one is 0.\n            this.encodeSingleNumber(0, DataType.UINT8);\n        }\n    }\n\n    decodeNumberArray(dataType?: DataType): number[] {\n        if (dataType === DataType.UINT2 || dataType === DataType.UINT4) {\n            const transform = dataType === DataType.UINT2 ? this.numToBit2 : this.numToBit4;\n            const structure = [];\n            const bytes = this.decodeNumberArray(DataType.UINT8);\n            for (let byte of bytes) {\n                structure.push(...transform(byte));\n            }\n            const sizeDiff = this.decodeSingleNumber(DataType.INT8);\n            structure.length += sizeDiff;\n            return structure;\n        }\n        let size;\n        const numbers = [];\n        do {\n            size = this.decodeSingleNumber(DataType.UINT8);\n            if (!size) {\n                break;\n            }\n\n            const type: DataType = dataType ?? this.decodeDataType();\n            for (let i = 0; i < size; i++) {\n                numbers.push(this.decodeSingleNumber(type));\n            }\n        } while (size >= MAX_ARRAY_SIZE);\n        return numbers;\n    }\n\n    encodeString(value: string, dataType?: DataType, multiInfo?: MultiInfo): void {\n        const usedDataType = dataType ?? this.encodeDataType(this.dataTypeUtils.getStringDataType(value));\n        const letterCodes = Array.from(value).map(l => l.charCodeAt(0));\n        if (!multiInfo?.organized || multiInfo.lastStringLength !== value.length) {\n            letterCodes.push(0);\n        }\n        // console.log(letterCodes, value, (letterCodes).map((value) => !value ? 0 : value - min + 1));\n        const numberType = usedDataType === DataType.STRING ? DataType.UINT8 : DataType.UINT16;\n        letterCodes.forEach(code => this.encodeSingleNumber(code, numberType));\n        if (multiInfo) {\n            multiInfo.lastStringLength = value.length;\n        }\n    }\n\n    decodeString(dataType?: DataType, multiInfo?: MultiInfo): string {\n        const usedDataType = dataType ?? this.decodeDataType();\n        const charCodes = [];\n        const numberType = usedDataType === DataType.STRING ? DataType.UINT8 : DataType.UINT16;\n        do {\n            const code = this.decodeSingleNumber(numberType);\n            if (!code) {\n                break;\n            }\n            charCodes.push(code);\n            if (multiInfo?.organized && multiInfo?.lastStringLength && charCodes.length >= multiInfo?.lastStringLength) {\n                break;\n            }\n        } while (true);\n        const string = charCodes.map(code => String.fromCharCode(code)).join(\"\");\n        if (multiInfo) {\n            multiInfo.lastStringLength = string.length;\n        }\n        return string;\n    }\n}\n","import Token, { Hash, ReducedToken } from \"../tokenizer/Token\";\nimport { Header } from \"../tokenizer/Header\";\nimport { DataType, DataTypeUtils, StructureType } from \"../compression/DataType\";\n\n/**\n * Stores all information needed to extract data.\n * \n * headerTokens: Common tokens used by all files.\n * files: array of indices that should match to string tokens within headerTokens.\n * getDataTokens: function to retrieve the tokens for each file. Pass the index that corresponds with files.\n */\nexport interface DataStore {\n    version?: string;\n    compressedSize?: number;\n    originalDataSize?: number;\n    headerTokens: ReducedToken[];\n    files: number[];\n    getDataTokens(index: number): ReducedToken[] | undefined;\n}\n\n/**\n * Reduce header from using large tokens to reduce tokens.\n */\nexport default class Reducer {\n    dataTypeUtils: DataTypeUtils;\n\n    constructor() {\n        this.dataTypeUtils = new DataTypeUtils();\n    }\n\n    /**\n     * Reduce header with smaller tokens for storage\n     * \n     * @param header Represents all data that we have.\n     * @returns DataStorage object that's the minimum we can store.\n     */\n    reduce(header: Header): DataStore {\n        const hashToIndex : Record<Hash, number>  = {};\n        //  start with header tokens\n        const headerTokens = this.createReducedHeaderTokens(\n            this.filterSplit(Object.values(header.registry)\n                .filter(token => token.files.size > 1 || token.files.has(\"header\")),\n                header.registry),\n            hashToIndex);\n\n        //  save files\n        const fileEntries = Object.entries(header.files).sort(([name1], [name2]) => name1.localeCompare(name2));\n        const files = fileEntries.map(([,token]) => hashToIndex[token.nameToken.hash]);\n        // console.log(\"FILES\", files);\n\n        //  save all files separately as complex objects.\n        const dataTokens = fileEntries.map(([, {token: root}]) => {\n            const subHashToIndex = {...hashToIndex};\n            const structure: StructureType[] = [];\n            const result: ReducedToken[] = [{\n                    type: \"complex\",\n                    value: structure,\n            }];\n            this.createComplexObject(root, subHashToIndex, header.registry, headerTokens, structure, result);\n            return result;\n        });\n\n        return {\n            originalDataSize: header.originalDataSize,\n            headerTokens,\n            files,\n            getDataTokens: (index: number) => dataTokens[index],\n        };\n    }\n\n    /**\n     * Sort tokens by frequency.\n     */\n    private sortTokens(tokens: Token[]): void {\n        tokens.sort((t1, t2) => t2.count - t1.count);\n    }\n\n    /**\n     * Organize tokens in groups of 255\n     * @param tokens \n     */\n    private organizeTokens(tokens: Token[]): Token[] {\n        if (!tokens.length) {\n            return tokens;\n        }\n        const buckets: Token[][] = [];\n        tokens.forEach(token => {\n            const dataType = this.dataTypeUtils.getFullTokenDataType(token);\n            let bucket: Token[] | undefined = undefined;\n            for (let b of buckets) {\n                if (b.length < 255 && this.dataTypeUtils.getFullTokenDataType(b[0]) === dataType) {\n                    bucket = b;\n                    break;\n                }\n            }\n            if (!bucket) {\n                bucket = [];\n                buckets.push(bucket);\n            }\n            bucket.push(token);\n        });\n\n        buckets.forEach(bucket => {\n            const dataType = this.dataTypeUtils.getFullTokenDataType(bucket[0]);\n            switch (dataType) {\n                case DataType.UINT8:\n                case DataType.UINT16:\n                case DataType.UINT32:\n                case DataType.INT8:\n                case DataType.INT16:\n                case DataType.INT32:\n                case DataType.FLOAT32:\n                case DataType.FLOAT64:\n                    bucket.sort((a, b) => b.value - a.value);\n                    break;\n                case DataType.STRING:\n                case DataType.UNICODE:\n                    bucket.sort((a, b) => b.value.length - a.value.length);\n                    break;\n                case DataType.ARRAY_8:\n                case DataType.ARRAY_16:\n                case DataType.ARRAY_32:\n                    bucket.sort((a, b) => b.value.length - a.value.length)\n                    break;\n            }\n        });\n        const resultTokens: Token[] = [];\n        buckets.forEach(bucket => bucket.forEach(token => resultTokens.push(token)));\n        return resultTokens;\n    }\n\n    private filterSplit(tokens: Token[], registry: Record<Hash, Token>): Token[] {\n        for (let token of tokens) {\n            if (token.type === \"split\") {\n                const [chunskHash, separatorsHash] = token.reference!;\n                const chunksToken = registry[chunskHash];\n                const separatorsToken = registry[separatorsHash];\n                if (chunksToken.count <= token.count && separatorsToken.count <= token.count) {\n                    chunksToken.deleted = true;\n                    separatorsToken.deleted = true;\n                    token.type = \"leaf\";\n                    delete token.reference;\n                }\n            }\n        }\n        return tokens.filter(({deleted}) => !deleted);\n    }\n\n    private createReducedHeaderTokens(tokens: Token[], hashToIndex : Record<Hash, number>, offset: number = 0) {\n        this.sortTokens(tokens);\n        const organizedTokens = this.organizeTokens(tokens);\n\n        organizedTokens.forEach(({hash}, index) => hashToIndex[hash] = index + offset);\n\n        return organizedTokens.map(token => ({\n            type: token.type,\n            value: token.reference?.map(hash => hashToIndex[hash]) ?? token.value,\n        }));\n    }\n\n    /**\n     *  Traverse object to produce a set of tokens used to produce a complex object\n     * @param token Root token\n     * @param hashToIndex Hash to index mapping\n     * @param result Resulting set of tokens\n     */\n    createComplexObject(token: Token, hashToIndex: Record<Hash, number>, registry: Record<Hash, Token>, headerTokens: ReducedToken[], structure: StructureType[], resultDataTokens: ReducedToken[]): void {\n        if (hashToIndex[token.hash] >= 0) {\n            structure.push(StructureType.LEAF);\n            resultDataTokens.push({ type: \"reference\", value: hashToIndex[token.hash] });\n        } else if (token.type === \"leaf\") {\n            structure.push(this.dataTypeUtils.typeToStructureType(token.type));\n            hashToIndex[token.hash] = headerTokens.length + resultDataTokens.length;\n            resultDataTokens.push({ type: token.type, value: token.value });\n        } else if (token.type === \"split\" || token.type === \"object\" || token.type === \"array\") {\n            structure.push(this.dataTypeUtils.typeToStructureType(token.type));\n            if (token.type === \"array\") {\n                resultDataTokens.push({ type: \"leaf\", value: token.reference?.length });\n            }\n            const subTokens = token.reference?.map((hash) => registry[hash]);\n            subTokens?.forEach(token => {\n                this.createComplexObject(token, hashToIndex, registry, headerTokens, structure, resultDataTokens);\n            });\n        } else {\n            throw new Error(\"Invalid token type\");\n        }\n    }\n}","import Encoder from \"./Encoder\";\nimport * as fflate from 'fflate';\n\nexport default class FFlateEncoder implements Encoder {\n    encode(arrayBuffer: ArrayBuffer): ArrayBuffer {\n        return fflate.gzipSync(new Uint8Array(arrayBuffer), {\n            mtime: '6/9/1978 12:00 PM', //  fixed time to avoid changes if content doesn't change\n          }).buffer;\n    }\n    decode(arrayBuffer: ArrayBuffer): ArrayBuffer {\n        return fflate.gunzipSync(new Uint8Array(arrayBuffer)).buffer;\n    }\n\n}","export type Type = \"leaf\" | \"array\" | \"object\" | \"split\" | \"reference\" | \"complex\";\nexport type Hash = string;\n\nexport const SPLIT_REGEX = /\\W+/g;\nexport const TEST_REGEX = /(\\w{3,}\\W+){2,}|(\\W+\\w{3,}){2,}/\n\n/**\n * Token represent each chunk of data within an object.\n */\nexport default interface Token extends StoredToken {\n    hash: Hash;\n    files: Set<string>;\n    order: number;\n    count: number;\n    reference?: Hash[];\n    deleted?: boolean;\n}\n\n/**\n * A minimal version of a token, where we eliminate extra data like hash.\n */\nexport interface StoredToken {\n    type: Type;\n    value: any;\n}\n\n/**\n * Stored token with added debug field for easier debugging, and cache for extraction optimization.\n */\nexport interface ReducedToken extends StoredToken {\n    cache?: any;\n}\n\n/**\n * detect the type of a value\n *\n * @param value Value to analyze\n * @returns type of the value\n */\nexport function getType(value: any): Type {\n    if (Array.isArray(value)) {\n        return \"array\";\n    } else if (typeof value === \"object\" && value) {\n        return \"object\";\n    } else if (typeof value === \"string\" && new Set(value).size < 16) {\n        return \"leaf\";\n    } else if (typeof value === \"string\" && TEST_REGEX.test(value)) {\n        return \"split\";\n    } else {\n        return \"leaf\";\n    }\n}","import Loader, { IFetcher } from \"../io/Loader\";\nimport { Header } from \"./Header\";\nimport Token, { getType, Hash, SPLIT_REGEX } from \"./Token\";\nimport md5 from \"blueimp-md5\";\n\n/**\n * Class for spitting objects into tokens.\n */\nexport default class Tokenizer {\n    private loader: Loader = new Loader();\n\n    /**\n     * Load json or text files and turn them into tokens.\n     * \n     * @param files files to load and reduce.\n     */\n    async load(files: string[], fetcher?: IFetcher<string>): Promise<Header> {\n        if (files.some(file => typeof file !== \"string\")) {\n            throw new Error(\"Each argument passed to load must be a string.\");\n        }\n        const sortedFiles = files.sort();\n        const allData = await Promise.all(sortedFiles.map(file => this.loader.load(file, fetcher)));\n        const header = this.tokenize(Object.fromEntries(allData.map((data, index) => [sortedFiles[index], data])));\n        return header;\n    }\n\n    /**\n     * Takes a mapping of filename and their corresponding data, and turn them into tokens.\n     *\n     * @param items Mapping from filename to data.\n     * @returns All data stored as tokens.\n     */\n    tokenize(items: Record<string, any>) {\n        const header: Header = {\n            registry: {},\n            files: {},\n        };\n\n        const counter = { next: 0 };\n\n        Object.entries(items).forEach(([file, value]) => {\n            header.files[file] = {\n                nameToken: this.tokenizeHelper(file, header.registry, counter, \"header\"),\n                token: this.tokenizeHelper(value, header.registry, counter, file),\n            }\n        });\n\n        const bytes = Uint8Array.from(Array.from(JSON.stringify(items)).map(letter => letter.charCodeAt(0)));\n        header.originalDataSize = bytes.byteLength;\n        return header;\n    }\n\n    private registerToken(hash: Hash, value: any, registry: Record<Hash, Token>, counter: { next: number }, file: string, reference?: string[]) {\n        const entry = registry[hash] ?? (registry[hash] = {\n            type: getType(value),\n            hash,\n            value,\n            reference,\n            order: counter.next++,\n            count: 0,\n            files: new Set(),\n        });\n        entry.files.add(file);\n        entry.count++;\n        return entry;\n    }\n\n    private tokenizeHelper(item: any, registry: Record<Hash, Token>, counter: { next: number }, file: string): Token {\n        const type = getType(item);\n        if (type === \"array\") {\n            if (!Array.isArray(item)) {\n                throw new Error(\"item should be an array\");\n            }\n            const hashes = item.map(item => this.tokenizeHelper(item, registry, counter, file)).map(({ hash }) => hash);\n            const hash = md5(hashes.join(\",\"));\n            return this.registerToken(hash, item, registry, counter, file, hashes);\n        } else if (type === \"object\") {\n            const entries = Object.entries(item);\n            const keysToken = this.tokenizeHelper(entries.map(([key]) => key), registry, counter, file);\n            const valuesToken = this.tokenizeHelper(entries.map(([, value]) => value), registry, counter, file);\n            const hash = md5(`${keysToken.hash}|${valuesToken.hash}`);\n            return this.registerToken(hash, item, registry, counter, file, [keysToken.hash, valuesToken.hash]);\n        } else if (type === \"split\") {\n            const chunks = item.split(SPLIT_REGEX);\n            const separators = item.match(SPLIT_REGEX);\n            const chunksToken = this.tokenizeHelper(chunks, registry, counter, file);\n            const separatorsToken = this.tokenizeHelper(separators, registry, counter, file);\n            const hash = md5(`${chunksToken.hash}-${separatorsToken.hash}`);\n            return this.registerToken(hash, item, registry, counter, file, [chunksToken.hash, separatorsToken.hash]);\n        } else {\n            const m = md5(JSON.stringify(item));\n            return this.registerToken(m, item, registry, counter, file);\n        }\n    }\n}\n","import { StructureType } from \"../compression/DataType\";\nimport { DataStore } from \"../reducer/Reducer\";\nimport { ReducedToken, Type } from \"../tokenizer/Token\";\n\n/**\n * Configuration that can be passed.\n * - cacheable: We can use cache to boost extraction speed. This uses a bit more memory.\n * This helps performance and memory, but can lead to weird side effects if the extracted object\n * gets modified.\n */\nexport interface ExtractionConfig {\n    cacheable: boolean;\n}\n\nconst DEFAULT_CONFIG: ExtractionConfig = {\n    cacheable: true,\n}\n\n/**\n * Class storing all data that can be extracted.\n */\nexport default class ExtractableData {\n    readonly extractor: Extractor = new Extractor();\n    readonly dataStore: DataStore;\n    readonly fileToSlot: Record<string, number>;\n    readonly config: ExtractionConfig;\n    readonly fileNames: string[];\n    readonly version?: string;\n    readonly originalDataSize?: number;\n    readonly compressedSize?: number;\n\n    constructor(dataStore: DataStore, config?: ExtractionConfig) {\n        this.dataStore = dataStore;\n        this.config = {\n            ...DEFAULT_CONFIG,\n            ...config,\n        };\n        this.fileNames = this.extractor.extractFileNames(dataStore.files, dataStore.headerTokens, this.config);\n        this.fileToSlot = Object.fromEntries(this.fileNames.map((file, index) => [file, index]));\n        this.version = dataStore.version;\n        this.originalDataSize = dataStore.originalDataSize;\n        this.compressedSize = dataStore.compressedSize;\n    }\n\n    /**\n     * Extract data form a stored file.\n     *\n     * @param filename filename to be extracted.\n     * @returns extracted data.\n     */\n    extract(filename: string) {\n        const slot = this.fileToSlot[filename];\n        const dataTokens = this.dataStore.getDataTokens(slot);\n        if (dataTokens) {\n            return this.extractor.extract(this.dataStore.headerTokens, dataTokens, this.config);\n        }\n    }\n\n    getHeaderTokens() {\n        return this.dataStore.headerTokens;\n    }\n}\n\nclass Extractor {\n    valueFetcher: Record<Type, undefined | ((token: ReducedToken, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig) => any)>;\n\n    constructor() {\n        this.valueFetcher = {\n            \"array\": this.getArray.bind(this),\n            \"leaf\": this.getLeaf.bind(this),\n            \"object\": this.getObject.bind(this),\n            \"split\": this.getSplit.bind(this),\n            \"reference\": this.getReference.bind(this),\n            \"complex\": undefined,\n        };\n    }\n\n    extractFileNames(files: number[], headerTokens: ReducedToken[], config: ExtractionConfig) {\n        return files.map(index => this.extractToken(index, headerTokens, undefined, config));\n    }\n\n    extract(headerTokens: ReducedToken[], dataTokens: ReducedToken[], config: ExtractionConfig) {\n        const tokenStream = dataTokens.entries();\n        const [,complexToken] = tokenStream.next().value;\n        const structure: StructureType[] = complexToken.value;\n        const token = this.extractComplex(structure.entries(), tokenStream, headerTokens, [...dataTokens], config);\n        return token;\n    }\n\n    private extractComplex(structure: Iterator<[number, StructureType]>, tokenStream: Iterator<[number, ReducedToken]>, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig): any {\n        const [, structureType] = structure.next().value;\n        switch (structureType) {\n            case StructureType.LEAF:\n                const [,leafToken]: [number, ReducedToken] = tokenStream.next().value;\n                const value = this.extractValueOrCache(leafToken, headerTokens, dataTokens, config, true, this.valueFetcher[leafToken.type]);\n                return value;\n            case StructureType.ARRAY:\n                const [,numToken]: [number, ReducedToken] = tokenStream.next().value;\n                const array = new Array(numToken.value).fill(null)\n                    .map(_ => this.extractComplex(structure, tokenStream, headerTokens, dataTokens, config));\n                return array;\n            case StructureType.OBJECT:\n                const keys: string[] = this.extractComplex(structure, tokenStream, headerTokens, dataTokens, config);\n                const values: any[] = this.extractComplex(structure, tokenStream, headerTokens, dataTokens, config);\n                const object = Object.fromEntries(keys.map((key, index) => [key, values[index]]));\n                return object;\n            case StructureType.SPLIT:\n                const chunks: string[] = this.extractComplex(structure, tokenStream, headerTokens, dataTokens, config);\n                const separators: string[] = this.extractComplex(structure, tokenStream, headerTokens, dataTokens, config);\n                const split = chunks.map((chunk, index) => `${chunk}${separators[index] ?? \"\"}`).join(\"\");\n                return split;\n\n        }\n    }\n\n    private extractToken(index: number, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined,\n            config: ExtractionConfig, allowUseCache?: boolean): any {\n        const token = index < headerTokens.length ? headerTokens[index] : dataTokens?.[index - headerTokens.length];\n        if (!token) {\n            throw new Error(\"Invalid token at index: \" + index);            \n        }\n        return this.extractValueOrCache(\n                token,\n                headerTokens,\n                dataTokens,\n                config,\n                allowUseCache,\n                this.valueFetcher[token.type]\n            );\n    }\n\n    private getLeaf(token: ReducedToken) {\n        return token.value;\n    }\n\n    private getReference(token: ReducedToken, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig): any {\n        const index = token.value;\n        return this.extractToken(index, headerTokens, dataTokens, config);\n    }\n\n    private getArray(token: ReducedToken, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig): any[] {\n        if (!Array.isArray(token.value)) {\n            throw new Error(\"Invalid array token\");\n        }\n        return token.value.map(index => this.extractToken(index, headerTokens, dataTokens, config));\n    }\n\n    private getObject(token: ReducedToken, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig): object {\n        const [keyIndex, valueIndex] = token.value;\n        const keys: string[] = this.extractToken(keyIndex, headerTokens, dataTokens, config, true);\n        const values = this.extractToken(valueIndex, headerTokens, dataTokens, config);\n        return Object.fromEntries(keys.map((key, index) => [key, values[index]]));\n    }\n\n    private getSplit(token: ReducedToken, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig): string {\n        const [chunksIndex, separatorsIndex] = token.value;\n        const chunks: string[] = this.extractToken(chunksIndex, headerTokens, dataTokens, config, true);\n        const separators: string[] = this.extractToken(separatorsIndex, headerTokens, dataTokens, config, true);\n        return chunks.map((chunk, index) => `${chunk}${separators[index] ?? \"\"}`).join(\"\");\n    }\n\n    private extractValueOrCache<T>(\n        token: ReducedToken,\n        headerTokens: ReducedToken[],\n        dataTokens: ReducedToken[] | undefined,\n        config: ExtractionConfig,\n        allowUseCache?: boolean,\n        getValue?: (token: ReducedToken, headerTokens: ReducedToken[], dataTokens: ReducedToken[] | undefined, config: ExtractionConfig) => T): T {\n        \n        if (token.cache !== undefined && allowUseCache) {\n            return token.cache;\n        }\n\n        const value = getValue!(token, headerTokens, dataTokens, config);\n        if (config.cacheable && token.type !== \"leaf\") {\n            token.cache = value;\n        }\n        return value;\n    }\n}","import Reducer, { DataStore } from \"../reducer/Reducer\";\nimport { StreamDataView } from \"stream-data-view\";\nimport Encoder from \"./Encoder\";\nimport TokenEncoder from \"./TokenEncoder\";\nimport FFlateEncoder from \"./FFlateEncoder\";\nimport Tokenizer from \"../tokenizer/Tokenizer\";\nimport ExtractableData, { ExtractionConfig } from \"../expander/Extractor\";\nimport Loader, { IFetcher } from \"../io/Loader\";\n\nconst version = \"1.1.0\";\n\nenum EncoderEnum {\n    NONE = 0,\n    FFLATE = 1,\n};\n\nconst ENCODERS: (() => Encoder | undefined)[] = [\n    () => undefined,\n    () => new FFlateEncoder(),\n]\n\nconst DEFAULT: EncoderEnum[] = [EncoderEnum.FFLATE];\n\nexport default class Compressor {\n    /**\n     * Load json or text files and compress them into one big blob.\n     * This uses the default encoders.\n     * \n     * @param files files to load.\n     */\n    async loadAndCompress(files: string[], fetcher?: IFetcher<string>, encoder: EncoderEnum[] = DEFAULT): Promise<ArrayBuffer> {\n        const tokenizer = new Tokenizer();\n        const header = await tokenizer.load(files, fetcher);\n\n        const reducer = new Reducer();\n        const dataStore = reducer.reduce(header);\n        return this.compressDataStore(dataStore, encoder);\n    }\n\n    /**\n     * Compress data into one big blob.\n     * This uses the default encoders.\n     * \n     * @param files files to load.\n     */\n    compress(data: Record<string, any>, encoder: EncoderEnum[] = DEFAULT): ArrayBuffer {\n        const tokenizer = new Tokenizer();\n        const header = tokenizer.tokenize(data);\n\n        const reducer = new Reducer();\n        const dataStore = reducer.reduce(header);\n        return this.compressDataStore(dataStore, encoder);\n    }\n    \n    async loadAndExpand(file: string, fetcher: IFetcher<ArrayBuffer> = Loader.ArrayBufferFetcher): Promise<ExtractableData> {\n        const arrayBuffer = await fetcher(file);\n        return this.expand(arrayBuffer);\n    }\n\n    expand(arrayBuffer: ArrayBuffer, config?: ExtractionConfig): ExtractableData {\n        return new ExtractableData(this.expandDataStore(arrayBuffer), config);\n    }\n\n    private compressDataStore(dataStore: DataStore, encoderEnums: EncoderEnum[] = DEFAULT): ArrayBuffer {\n        const streamDataView = new StreamDataView();\n        const tokenEncoder: TokenEncoder = new TokenEncoder(streamDataView);\n\n        //  Write header tokens\n        tokenEncoder.encodeTokens(dataStore.headerTokens, true);\n        //  Write fileNames\n        tokenEncoder.encodeNumberArray(dataStore.files);\n\n        const finalStream = new StreamDataView();\n        //  Write version\n        finalStream.setNextUint8(version.length);\n        finalStream.setNextString(version);\n\n        //  Write encoders\n        encoderEnums.forEach(encoderEnum => finalStream.setNextUint8(encoderEnum));\n        finalStream.setNextUint8(0);\n\n        const encoders: Encoder[] = encoderEnums\n            .map(encoderEnum => ENCODERS[encoderEnum]())\n            .filter((encoder): encoder is Encoder => !!encoder);\n\n        //  Write header\n        const headerBuffer = this.applyEncoders(streamDataView.getBuffer(), encoders);\n        finalStream.setNextUint32(headerBuffer.byteLength);\n        finalStream.setNextBytes(headerBuffer);\n        // console.log(\"HEADER length\", headerBuffer.byteLength);\n\n        //  Write each file's data tokens.\n        for (let index = 0; index < dataStore.files.length; index++) {\n            const subStream = new StreamDataView();\n            const subEncoder = new TokenEncoder(subStream);\n            subEncoder.encodeTokens(dataStore.getDataTokens(index)!, false);\n\n            //  save and compress buffer\n            const subBuffer = this.applyEncoders(subStream.getBuffer(), encoders);\n            finalStream.setNextUint32(subBuffer.byteLength);\n            // console.log(\"SUBBUFFER length\", index, subBuffer.byteLength);\n            finalStream.setNextBytes(subBuffer);\n        }\n        finalStream.setNextUint32(0);\n\n        //  Write original data size\n        finalStream.setNextUint32(dataStore.originalDataSize ?? 0);\n\n        return new Uint8Array(finalStream.getBuffer()).buffer;\n    }\n\n    private expandDataStore(arrayBuffer: ArrayBuffer): DataStore {\n        const compressedSize = arrayBuffer.byteLength;\n        let input = arrayBuffer;\n        const globalStream = new StreamDataView(input);\n        const version = globalStream.getNextString(globalStream.getNextUint8());\n        const decoders: Encoder[] = [];\n        do {\n            const encoderEnum = globalStream.getNextUint8();\n            if (encoderEnum === EncoderEnum.NONE) {\n                break;\n            }\n            const decoder = ENCODERS[encoderEnum]?.();\n            if (decoder) {\n                decoders.push(decoder);\n            }\n        } while(globalStream.getOffset() < globalStream.getLength());\n\n        const headerByteLength = globalStream.getNextUint32();\n        const headerBuffer = this.applyDecoders(globalStream.getNextBytes(headerByteLength).buffer, decoders);\n\n        const headerTokenEncoder = new TokenEncoder(new StreamDataView(headerBuffer));\n        const headerTokens = headerTokenEncoder.decodeTokens(true);\n        const files = headerTokenEncoder.decodeNumberArray();\n\n        const subBuffers: ArrayBuffer[] = [];\n        do {\n            const byteLength = globalStream.getNextUint32();\n            if (!byteLength) {\n                break;\n            }\n            subBuffers.push(globalStream.getNextBytes(byteLength).buffer);\n        } while(globalStream.getOffset() < globalStream.getLength())\n\n        const getDataTokens = (index: number) => {\n            const subBuffer = this.applyDecoders(subBuffers[index], decoders);\n            const streamDataView = new StreamDataView(subBuffer);\n            const tokenDecoder = new TokenEncoder(streamDataView);\n            return tokenDecoder.decodeTokens(false);\n        }\n\n        //  The remaining from streamDataView is extra. Some compressed data don't have it.\n        let originalDataSize;\n        try {\n            originalDataSize = globalStream.getNextUint32() || undefined;\n        } catch (e) {\n        }\n\n        return {\n            version,\n            originalDataSize,\n            compressedSize,\n            headerTokens,\n            files,\n            getDataTokens,\n        }\n    }\n\n    private applyEncoders(buffer: ArrayBuffer, encoders: Encoder[]): ArrayBuffer {\n        let resultBuffer = buffer;\n        encoders.forEach(encoder => {\n            resultBuffer = encoder.encode(resultBuffer);\n        });\n        return resultBuffer;\n    }\n\n    private applyDecoders(buffer: ArrayBuffer, decoders: Encoder[]): ArrayBuffer {\n        let resultBuffer = buffer;\n        decoders.forEach(decoder => {\n            resultBuffer = decoder.decode(resultBuffer);\n        });\n        return resultBuffer;\n    }\n}\n","import Loader from \"./io/Loader\";\nimport TokenEncoder from \"./compression/TokenEncoder\";\nimport Compressor from \"./compression/Compressor\";\nimport FFlateEncoder from \"./compression/FFlateEncoder\";\n\nconst exportedClasses = {\n  Loader,\n  Compressor,\n  TokenEncoder,\n  FFlateEncoder,\n}\n\nexport default exportedClasses;\n"],"names":["yaml","require","extension","file","split","pop","Loader","_proto","prototype","load","fetcher","BrowserFetcher","then","text","JSON","parse","e","Promise","reject","fetch","response","arrayBuffer","StructureType","DataType","NUMBER_DATA_TYPES","UINT8","INT8","UINT16","INT16","UINT32","INT32","FLOAT32","FLOAT64","DataTypeUtils","numberSatisfyDataType","value","dataType","hasDecimal","Math","fround","UINT2","UINT4","getBestType","array","some","number","every","_this","min","apply","max","_i","_NUMBER_DATA_TYPES","length","getNumberDataType","_i2","_NUMBER_DATA_TYPES2","type","UNDEFINED","getStringDataType","letterCodes","Array","from","map","l","charCodeAt","code","STRING","UNICODE","getFullTokenDataType","token","ARRAY_8","OBJECT_8","SPLIT_8","getDataType","COMPLEX_OBJECT","indices","console","assert","EMPTY_ARRAY","offset","bestType","OBJECT_16","OBJECT_32","SPLIT_16","SPLIT_32","OFFSET_ARRAY_8","OFFSET_ARRAY_16","OFFSET_ARRAY_32","ARRAY_16","ARRAY_32","undefined","NULL","BOOLEAN_TRUE","BOOLEAN_FALSE","REFERENCE_8","REFERENCE_16","REFERENCE_32","Error","dataTypeToType","typeToStructureType","LEAF","ARRAY","OBJECT","SPLIT","MAX_ARRAY_SIZE","TokenEncoder","streamDataView","dataTypeUtils","encodeTokens","tokens","organized","pos","count","encodeMulti","decodeTokens","getOffset","getLength","decodeMulti","encodeToken","multiInfo","usedDataType","encodeDataType","encodeSingleNumber","encodeString","encodeObjectToken","encodeSplitToken","encodeArrayToken","encodeReferenceToken","encodeComplexToken","decodeToken","decodeDataType","decodeSingleNumber","decodeString","decodeObjectToken","decodeSplitToken","decodeArrayToken","decodeReferenceToken","decodeComplexToken","isOffsetDataType","arrayToken","numberType","encodeNumberArray","decodeNumberArray","objectToken","_objectToken$value","keysIndex","valuesIndex","splitToken","_splitToken$value","chunksIndex","separatorsIndex","index","structure","setNextUint8","getNextUint8","firstType","multiCount","maxCount","i","push","setNextInt8","setNextUint16","setNextInt16","setNextUint32","setNextInt32","setNextFloat32","setNextFloat64","getNextInt8","getNextUint16","getNextInt16","getNextUint32","getNextInt32","getNextFloat32","getNextFloat64","bit2ToNum","_ref","a","b","c","d","numToBit2","n","size","slice","bit4ToNum","_ref2","numToBit4","stride","transform","bytes","_iterator","_createForOfIteratorHelperLoose","_step","done","byte","sizeDiff","numbers","lastStringLength","forEach","charCodes","string","String","fromCharCode","join","Reducer","reduce","header","hashToIndex","headerTokens","createReducedHeaderTokens","filterSplit","Object","values","registry","filter","files","has","fileEntries","entries","sort","name1","name2","localeCompare","_ref3","nameToken","hash","dataTokens","_ref4","root","subHashToIndex","_extends","result","createComplexObject","originalDataSize","getDataTokens","sortTokens","t1","t2","organizeTokens","buckets","_this2","bucket","_buckets","resultTokens","_token$reference","reference","chunskHash","separatorsHash","chunksToken","separatorsToken","deleted","_ref5","organizedTokens","_ref6","_token$reference$map","_token$reference2","resultDataTokens","_token$reference4","_token$reference3","subTokens","_this3","FFlateEncoder","encode","fflate","Uint8Array","mtime","buffer","decode","SPLIT_REGEX","TEST_REGEX","getType","isArray","Set","test","Tokenizer","sortedFiles","resolve","all","loader","allData","tokenize","fromEntries","data","items","counter","next","tokenizeHelper","stringify","letter","byteLength","registerToken","entry","_registry$hash","order","add","item","hashes","md5","keysToken","key","valuesToken","chunks","separators","match","m","DEFAULT_CONFIG","cacheable","ExtractableData","dataStore","config","Extractor","fileNames","extractor","extractFileNames","fileToSlot","version","compressedSize","extract","filename","slot","getHeaderTokens","valueFetcher","getArray","bind","getLeaf","getObject","getSplit","getReference","_proto2","extractToken","tokenStream","_tokenStream$next$val","complexToken","extractComplex","concat","_structure$next$value","structureType","_tokenStream$next$val2","leafToken","extractValueOrCache","_tokenStream$next$val3","numToken","fill","_","keys","object","chunk","_separators$index","allowUseCache","_token$value","keyIndex","valueIndex","_token$value2","_separators$index2","getValue","cache","EncoderEnum","ENCODERS","DEFAULT","FFLATE","Compressor","loadAndCompress","encoder","tokenizer","reducer","compressDataStore","compress","loadAndExpand","ArrayBufferFetcher","expand","expandDataStore","encoderEnums","StreamDataView","tokenEncoder","finalStream","setNextString","encoderEnum","encoders","headerBuffer","applyEncoders","getBuffer","setNextBytes","subStream","subEncoder","subBuffer","_dataStore$originalDa","input","globalStream","getNextString","decoders","_ENCODERS$encoderEnum","NONE","decoder","call","headerByteLength","applyDecoders","getNextBytes","headerTokenEncoder","subBuffers","tokenDecoder","resultBuffer","exportedClasses"],"mappings":"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"}